#!/usr/bin/perl -s
# Copyright (c) 1998,1999,2001,2002 Kevin Cameron
# Distributed under the GNU Lesser General Public License
# RCS ID: $Id: mkgate,v 1.11 2007/02/04 01:38:24 dkc Exp $
 
if (!defined($vprim)) {
    $vprim="vprim.inc";
}

open VPRIM,">$vprim.tmp";
print VPRIM "\n/* Generated by mkgate */\n\n";

while (<>) {
    s+//.*++;
    chomp;
    @flds = split;
    if ($#flds > 0) {
	if ($flds[0] ne "extern") {die "Bad line: $_\n";}

        $cls = $flds[2];
	$_   = $cls;
	tr/[a-z]/[A-Z]/;
        $uc  = $_;

	print VPRIM "PRIM($uc,$cls)\n";

        shift @flds; shift @flds; shift @flds;
        $_    = join "",@flds;
        @flds = split /,|\(|\)|;/;
        $_    = join " ",@flds;
	print "class gate_$cls : public model { //$_\n";
        shift @flds;
	print "public:\n";
	print '#include "model.vfn"',"\n";
        if (/\*/) {
            print " int n;\n";
        }
	print "};\n\n";
	print "#ifdef DEFINE_MODELS\n\n";
	print "eREF        gate_${cls}::Type()                       const {return REF_VPRIM;}\n";
	print "int         gate_${cls}::Index()                      const {return GATE_$uc;}\n";
	print "bool        gate_${cls}::Xtra(void *)                 const {return 0;}\n";
	print "const char *gate_${cls}::procLabel(void *,int,char *) const {return \"\";}\n";
	print "eDM         gate_${cls}::drvMode()                    const {return DM_FLAGS;}\n";
	print "PortTyp     gate_${cls}::portType(int p)              const {return PT_NONE;}\n";
	print "void        gate_${cls}::Unneeded()                   const {}\n";
        if (/\*/) {
            print "void        gate_${cls}::setPorts(int c)                    {n = c;}\n\n";
        } else {
            print "void        gate_${cls}::setPorts(int c)                    {}\n\n";
	}
	print "PortDir gate_${cls}::portMode(int p) const {\n  int pm = PRT_IO_LSTD;\n";
        if (/out\*/) {
            print "  if (n == p) pm |= PRT_IN;\n";
            print "  else        pm |= PRT_OUT;\n";
        } elsif (/in\*/) {
            print "  if (0 == p) pm |= PRT_OUT;\n";
            print "  else        pm |= PRT_IN;\n";
        } else {
	    $i = 0;
	    print "  switch (p) {\n";
           foreach $p (@flds) {
	       if    ($p eq "inout") {print "  case $i: pm |= PRT_INOUT; break;\n";}
 	       elsif ($p eq "in")    {print "  case $i: pm |= PRT_IN;    break;\n";}
	       else                  {print "  case $i: pm |= PRT_OUT;   break;\n";}
               $i++;
           }
            print "}\n";  
	}
        print "  return (PortDir)pm;\n}\n";
	print "eCX  gate_${cls}::cmpXtra(void *x1,void *x2) const {\n",
              "  return (x1 == x2) ? CX_SAME : CX_BAD;\n}\n";
	print "\nint gate_${cls}::Bind(void *,int,int *,prtCB) const {\n";
	print "  return -1;\n}\n";
	print "\nint gate_${cls}::Wires(void *vp,int w) const {\n";
        if (/\*/) {
            print "return w > ",$#flds," ? w : ",$#flds,";\n";
        } else {
            print "return ",1 + $#flds,";\n";
        }
	print "}\n\n";
	print "\nint gate_${cls}::PortWidth(void *vp,PortInfo *pi,int w) const {\n";
        if (/\*/) {
            print "w = FixPortWidth(vp,pi,",$#flds,",w);\n";
            print "return w;\n";
        } else {
            print "return ",1 + $#flds," - pi->used >= w ? w : ",
                                                   1 + $#flds," - pi->used;\n";
        }
	print "}\n";
	print "\nvoid gate_${cls}::getSigInfo(void *ip,eREF rft,int pidx,",
                                             "int prts,int si) const {\n",
              "  DrvInfo dri; dri.gate = GTD_PLAIN;";
        if (/\*/) {
            $_ = $flds[0];
            if (/\*/) {
		if (/in/) {print "  if (pidx == prts-1)\n";
                           print "    SIcllctr->setSigInfo(ip,-1,si,dri,0,0,1,SI_NO_XTRA);\n";
                           print "  else\n";
                           print "    SIcllctr->setSigInfo(ip,-1,si,dri,0,1,0,SI_NO_XTRA);\n";}
                else      {print "  if (pidx == prts-1)\n";
                           print "    SIcllctr->setSigInfo(ip,-1,si,dri,0,1,0,SI_NO_XTRA);\n";
                           print "  else\n";
                           print "    SIcllctr->setSigInfo(ip,-1,si,dri,0,0,1,SI_NO_XTRA);\n";}
            } else {
		if (/in/) {print "  if (pidx == 0)\n";
                           print "    SIcllctr->setSigInfo(ip,-1,si,dri,0,1,0,SI_NO_XTRA);\n";
                           print "  else\n";
                           print "    SIcllctr->setSigInfo(ip,-1,si,dri,0,0,1,SI_NO_XTRA);\n";}
                else      {print "  if (pidx == 0)\n";
                           print "    SIcllctr->setSigInfo(ip,-1,si,dri,0,0,1,SI_NO_XTRA);\n";
                           print "  else\n";
                           print "    SIcllctr->setSigInfo(ip,-1,si,dri,0,1,0,SI_NO_XTRA);\n";}
            }
        } else {
            print "  switch (pidx) {\n";
            $i = 0;
            foreach $_ (@flds) {
		if (/inout/) {print "  case $i: dri.gate = GTD_BIDIR;",
                                    "           SIcllctr->setSigInfo(ip,-1,si,dri,0,1,1,SI_NO_XTRA);";}
                elsif (/in/) {print "  case $i: SIcllctr->setSigInfo(ip,-1,si,dri,0,1,0,SI_NO_XTRA);";}
                else         {print "  case $i: SIcllctr->setSigInfo(ip,-1,si,dri,0,0,1,SI_NO_XTRA);";}
                $i++;
                print " // $_\n";
            }
            print "  }\n";
        }
	print "}\n";
	print "\n#endif\n\n";
    }
}

print VPRIM "\n#undef PRIM\n";
close VPRIM;

if ( -f "$vprim" ) {
    $_ = `diff $vprim.tmp $vprim`;
} else {
    $_ = "Update";
}

if ("" ne $_) {
    rename "$vprim.tmp","$vprim";
} else {
    print STDERR "$vprim: OK\n";
}
