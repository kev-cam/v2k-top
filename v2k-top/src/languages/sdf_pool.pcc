/* Copyright (c) 1998-2007 Kevin Cameron */
/* Distributed under the GNU Lesser General Public License */
/* RCS ID: */ extern "C" const char * sdf_pool_pcc_rcsid() {return "$Id: sdf_pool.pcc,v 1.14 2012/10/16 22:38:45 cvs Exp $";}

#define CLASS_FILE SDF_POOL
#define VERILOG3
#define VERILOG4

#include "system.h"
#include "error.h"
#include "assertions.h"
#include "poolmngr.h"
#include "v2k_mem.h"
#define NEED_VERILOG
#include "tokpool.h"
#include "verilog.h"
#include "sdf.h"
#include "sdf_pool-dsc.h"
#include "sdf_pool.h"
#include "arith.h"

#define THIS_EXPR TemplateExpr

class TemplateSdfPool:public TemplateXpPool {
#undef  POOL_CLASS
#define POOL_CLASS   Sdf
#undef  THIS_CLASS
#define THIS_CLASS   TemplateSdfPool
// THIS_CLASS = TemplateSdfPool
#undef  PARENT_CLASS
#define PARENT_CLASS TemplateXpPool
// PARENT_CLASS = TemplateXpPool
public:
#include "TemplateSdfPool.fld"
#define INHERIT_MINIMIZE
#define INHERIT_CLOSE
#include "TemplatePool.vfn"
#include "TemplateSdfPool.vfn"
#include "ixderef.inc"
#include "sdf_pool-rop.cpp"

  DECL_IXR(plExpr)

  inline TemplateSdfPool *me() const {
    return (TemplateSdfPool *)self;
  };
  inline TemplateSdfPool *mi() const {
    return (TemplateSdfPool *)PoolMngr->pool(mngr_indx);
  };
  inline TemplateSdfPool *mod_pool(int id)
  {
    return (TemplateSdfPool *)(PoolMngr->pool(id));
  };

  void Init();
};

#define SDF_ONLY

TemplateSdfPool:: TemplateSdfPool()    {}
TemplateSdfPool:: TemplateSdfPool(int) {}
TemplateSdfPool::~TemplateSdfPool()    {}

int TemplateSdfPool::dumpAscii(const char *filename)
{
  return STS_NIY;
}

ePM TemplateSdfPool::changeMode(ePM to)
{
#include "../common/convert.icc"
  return old;
}

sFieldDesc *TemplateSdfPool::description(){
  static sFieldDesc Description[] = {
#include "TemplateSdfPool-dsc.h"
  };

  return Description;
}

void TemplateSdfPool::Init()
{
}

#include "../common/describe.icc"

void TemplateSdfPool::dumpExpr(Stream *strm,plExpr *plx,ContextObj *root)
{
  TemplateExpr *xpr = (TemplateExpr *)plx;

#if REF_IS_PTR == 0
  xpr->pool(mngr_indx);
#endif

  xpr->dump(strm,root);
}

void TemplateSdfPool::dumpInst(Stream *strm,int i,int dvdr)
{
  plCellInst *pInst = P(path);
  pInst            += i;
  poolRef *pRef     = P(pInst->elem);
  if ((i = pInst->elems)) for (;;) {
    strm->printf("%s",strDeref(*pRef++));
    if (--i <= 0) break;
      strm->printf("%c",dvdr);
  }
}

void TemplateSdfPool::dumpPortRef(Stream *strm,int ii,int nm)
{
  poolRef *pRef;

  if (ii >= 0) {
    dumpInst(strm,ii,divider);
    strm->printf("%c",divider);
    pRef = P(name);
  } else {
    pRef = P(port);
  }

  strm->printf("%s",strDeref(pRef[nm]));
}

void TemplateSdfPool::dumpPort(Stream *strm,int i,int dvdr,ContextObj *root,
                               int ignr_cnd)
{
  poolRef    *pRef;
  plPortPath *pPP = P(pp);

  pPP       += i;
  int  cond  = (ignr_cnd < 0 && P(pPP->cond)),
       clos  = 0;
  eEDG edge  = EDG(pPP->edge);

  if (cond) strm->printf("(COND ");

  switch (edge) {
# define EDGE(e,s) case EDG_##e: strm->printf("(%s ",s); clos++; break;
# include "edges.inc"
  default:       assert(("Bad edge data",0));
  case EDG_NONE: break;
  }

  if ((i = pPP->inst) >= 0) {
    dumpInst(strm,i,dvdr);
    strm->printf("%c",dvdr);
    pRef = P(name);
  } else {
    pRef = P(port);
  }

  strm->printf("%s",strDeref(pRef[pPP->name]));

  if ((i = pPP->ranges)) {
    char  punc = '[';
    int   r    = 0;
    for (; r < i ; r++,punc = ':') {
      strm->printf("%c%d",punc,pPP->range[r]);
    }
    strm->printf("]");
  }

  if (cond) {
    strm->printf(" ");
    dumpExpr(strm,P(pPP->cond),root);
    clos = 1;
  }

  if (clos) strm->printf(")");
}

void TemplateSdfPool::dumpValue(Stream *strm,plRtriple *trip)
{
  plRtriple cpy = *trip;
  int       i   = 0;

  for (;;) {
     plRvalue rv;
     rv.typ = RVT(cpy.typ[i]);
     rv.val = cpy.val[i];
     dumpValue(strm,&rv,0);
     if (i++ == 2) break;
       strm->printf(":");
  }
}

void TemplateSdfPool::dumpValue(Stream *strm,plRvalue *pv,int brktd)
{
  eRVT typ = pv->typ;
  int  val = pv->val;

  switch (typ) {

  case RVT_VAL3:  {plRval3 *p3 = P(val3);
                   p3 += val;
                   dumpValue(strm,&p3->v[0],1);
                   dumpValue(strm,&p3->v[1],1);
                   dumpValue(strm,&p3->v[2],1);     break;}
  case RVT_VAL2:
  case RVT_VAL6:
  case RVT_VAL12: {plRval2 *p2 = P(val2);
                   p2 += val;
                   dumpValue(strm,&p2->v[0],1);
                   dumpValue(strm,&p2->v[1],1);     break;}
  case RVT_DOUBLE:{double *pD = P(dbl);
                   strm->printf("%g",pD[val]);    break;}
  case RVT_TRIPLE:{plRtriple *pT = P(trpl);
                   if (brktd) strm->printf(" (");
                   dumpValue(strm,&pT[val]);
                   if (brktd) strm->printf(")");
                                                  break;}
  case RVT_INT:    strm->printf("%d",val);        break;

  case RVT_NONE:   break;
  default:         assert(("Bad RVT type",0));
  }
}

void TemplateSdfPool::dump(Stream *strm,ContextObj *root)
{
  int               i,
                    clls = cells,
                    dvdr = divider;
  plCell           *pCll = P(cell),
                    Cell;
  plRvalue          v1   = voltage,
                    v2   = temperature;

  strm->printf("(DELAYFILE\n");
  strm->printf(" (SDFVERSION \"%s\")\n",strDeref(sdfversion));
  strm->printf(" (VERSION \"%s\")\n",   strDeref(version));
  strm->printf(" (DESIGN \"%s\")\n",    strDeref(design));
  strm->printf(" (DATE \"%s\")\n",      strDeref(date));
  strm->printf(" (VENDOR \"%s\")\n",    strDeref(vendor));
  strm->printf(" (PROGRAM \"%s\")\n",   strDeref(program));
  strm->printf(" (PROCESS \"%s\")\n",   strDeref(process));
  strm->printf(" (TIMESCALE %d",        tsi);
  switch (tse) {
  case -6:  strm->printf("us)\n");        break;
  case -9:  strm->printf("ns)\n");        break;
  case -12: strm->printf("ps)\n");        break;
  default:  strm->printf("e-%ds)\n",tse); break;
  }
  strm->printf(" (VOLTAGE ");
  dumpValue(strm,&v1,0);
  strm->printf(" )\n (TEMPERATURE ");
  dumpValue(strm,&v2,0);
  strm->printf(" )\n");

  for (i = 0; i < clls ; pCll = P(Cell.next), i++) {
    Cell = *pCll;
    strm->printf(" (CELL\n");
    strm->printf("  (CELLTYPE \"%s\")\n",strDeref(Cell.cll_typ));

    int l = Cell.insts,
        c = 0,
        *pI;

    for (; c < l; c++) {
      int  *
      pI = P(Cell.inst);
      strm->printf("  (INSTANCE ");
      if (pI[c] >= 0) dumpInst(strm,pI[c],dvdr);
      strm->printf(")\n");
    }

    int      lst_dly = -1,
             lst_abs = -1,
             p;
    plCheck *pChk    = P(Cell.chk),
             Chk;

    for (l = Cell.chks,c = 0; c < l ; pChk = P(Chk.next), c++) {
      Chk     = *pChk;
      int dly = (Chk.typ <= CHK_LAST_DELAY),
          abs = (Chk.mode == DMD_ABS);
      if (lst_dly != dly) {
        if (lst_dly >= 0)    strm->printf("))\n");
        if ((lst_dly = dly)) strm->printf("  (DELAY\n");
        else                 strm->printf("  (TIMINGCHECK");
        lst_abs = -1;
      }
      if (lst_dly && lst_abs != abs) {
        if (lst_abs >= 0)    strm->printf(")\n");
        if ((lst_abs = abs)) strm->printf("   (ABSOLUTE");
        else                 strm->printf("   (INCREMENTAL");
      }
      pI           = P(Chk.port);
      int ignr_cnd = -1,
          clos     = 1;
      strm->printf(lst_dly ? "\n    (%s"
                           : "\n   (%s", strChk[Chk.typ]);
      switch (Chk.typ) {
      plPortPath *pPP;
      case CHK_COND: strm->printf(" ");
                     pPP  = P(pp);
                     pPP += pI[0];
                     dumpExpr(strm,P(pPP->cond),root);
                     ignr_cnd = 1;
                     clos++;
                     strm->printf(" (%s",strChk[Chk.inner]);
                     /* drop thru */
      default:       for (p = 0; p < Chk.ports ; p++) {
                       strm->printf(" ");
                       dumpPort(strm,pI[p],dvdr,root,--ignr_cnd);
	               }
      }
      dumpValue(strm,&Chk.val,1);
      while (clos-- > 0) strm->printf(")");
    }
    if (lst_dly > 0) strm->printf(")");
    strm->printf(")\n )\n");
  }
  strm->printf(")\n");
}
