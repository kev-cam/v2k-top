/* Copyright (c) 1998-2007 Kevin Cameron */
/* Distributed under the GNU Lesser General Public License */
/* RCS ID: $Id: tokfunc.icc,v 1.10 2007/03/28 07:24:16 dkc Exp $ */

#if defined(DEBUG) && !defined(PROFILE)
#undef  InLine
#define InLine
#endif

static InLine int nextChar(ParseData *pData)
{
   if (pData->pos < pData->count) {
      pData->curr = pData->buff[pData->pos++];
   } else {
     if ((pData->curr = fgetc(pData->in)) >= 0) {
       pData->buff[pData->count++] = pData->curr;
     } else {
       pData->eof                  = 1;
       pData->buff[pData->count++] = '\0';
     }
#ifdef DEBUG
     pData->buff[pData->count] = '\0';
#endif
     pData->pos = pData->count;
   }
   return  pData->curr;
}

static InLine Token *handleBQ(ParseData *pData)
{
   return createTok(pData,QUOTES_POOL,QUT_BACK,1);
}

static InLine Token *handleSQ(ParseData *pData)
{
   return createTok(pData,QUOTES_POOL,QUT_SINGLE,1);
}

static InLine Token *handleDQ(ParseData *pData)
{
   return createTok(pData,QUOTES_POOL,QUT_DOUBLE,1);
}

static InLine Token *handleNL(ParseData *pData)
{
   return createTok(pData,WHITESPACE_POOL,WHT_NL,1);
}

static InLine Token *handleTB(ParseData *pData)
{
   return createTok(pData,WHITESPACE_POOL,WHT_TAB,1);
}

static InLine Token *handleSP(ParseData *pData)
{
   return createTok(pData,WHITESPACE_POOL,WHT_SPC,1);
}


