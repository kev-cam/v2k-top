/* Copyright (c) 1998-2007 Kevin Cameron */
/* Distributed under the GNU Lesser General Public License */
/* RCS ID: */ extern "C" const char * xp_pool_pcc_rcsid() {return "$Id: xp_pool.pcc,v 1.24 2007/02/01 06:49:08 dkc Exp $";}
 


#define CLASS_FILE XP_POOL
#define VERILOG3
#define VERILOG4

#include "system.h"
#include "error.h"
#include "assertions.h"
#include "poolmngr.h"
#include "v2k_mem.h"
#define NEED_VERILOG
#include "tokpool.h"
#include "verilog.h"
#include "xp_pool.h"
#include "arith.h"

#define THIS_EXPR TemplateExpr

class TemplateModulePool;
class TemplateXpPool:public TemplatePool {
#undef  POOL_CLASS
#define POOL_CLASS   Xp
#undef  THIS_CLASS
#define THIS_CLASS   TemplateXpPool
// THIS_CLASS = TemplateXpPool
#undef  PARENT_CLASS
#define PARENT_CLASS TemplatePool
// PARENT_CLASS = TemplatePool
public:
#include "TemplateXpPool.fld"
#define INHERIT_MINIMIZE
#define POOL_VIRTUAL
#include "TemplatePool.vfn"
#include "TemplateXpPool.vfn"
#include "ixderef.inc"
#include "veri_pool-rop.cpp"

  static ExprAlias *Aliases;

  inline TemplateModulePool *mod_pool() {return (TemplateModulePool *)this;};

};

ExprAlias *TemplateXpPool::Aliases;

TemplateXpPool:: TemplateXpPool()    {}
TemplateXpPool:: TemplateXpPool(int) {}
TemplateXpPool::~TemplateXpPool()    {}

sFieldDesc *TemplateXpPool::description()
{
  static sFieldDesc Description[] = {
#include "TemplateXpPool-dsc.h"
  };

  return Description;
}

#include "../common/describe.icc"

XREF(plExpr) TemplateXpPool::plSaveExpr(Expr *xpr)
{
  poolRef       ref,
                nm;
  Qzx          *qzx;
  plQzx        *pqzx;
  int           n,
                vtx;
  VlType        vt;
  XREF(plExpr)  ret,
                lr,
                rr;
  ExprAlias    *ea;
  plExpr       *px;
  Expr         *xpr2;

  if (xpr)
  {
    if (xpr->xtra & VTX_DUMPED) {
      for (ea = Aliases; ea && ea->xpr != xpr; ea = ea->next);
      assert(("Lost Alias",ea));
      ref = ea->ref;
      IREF2MODE(ref,&ret);
      goto alrdy_dn;
    }

    vtx = xpr->xtra & VTX_PERM;

    if (!vtx) xpr->xtra = VL_TYP_XTRA(xpr->xtra|VTX_PERM);

    px                  = (plExpr *)allocAligned(sizeof(plExpr),
                                                 8,&ref,ALC_PERM);
    *((plBaseExpr *)px) = *xpr->plBaseExpr_Data();
    px->value           = *xpr->val()->plValue_Data();
    IREF2MODE(ref,&ret);

    if (xpr->xtra & VTX_ALIASSED) {
      xpr->xtra  = VL_TYP_XTRA(xpr->xtra|VTX_DUMPED);
      ea         = new ExprAlias;
      ea->xpr    = xpr;
      ea->ref    = ref;
      ea->next   = Aliases;
      Aliases    = ea;
    }

    if (NON_EXPR(xpr->lhs())) {
      int w;
      U64 r;
      switch (xpr->typ) {
      case VT_LOGIC: n = xpr->lgcWdth();
	             r = xpr->pval()->u64;
                     BITS2LWORDS(n)
                     pqzx = (plQzx *)allocAligned(n * sizeof(plQzx),
                                                  8,&nm,ALC_PERM);
                     IREF2MODE(nm,&rr);
                     for (w = 0,qzx=(Qzx *)xpr->rhs(); w < n ; w++) {
                       if (qzx) {
                         pqzx[w] = *(plQzx *)qzx;
                         qzx     = qzx->next;
                       } else {
                         BZERO(&pqzx[w],sizeof(pqzx[w]));
                         pqzx[w].n = r;
                         r         = 0;
                       }
                     }
                     break;
      default:       rr.pi.pool = rr.pi.index = 0;
      }
      px           = P(ret);
      px->left.ptr = xpr->lhs();
      px->right    = I(*(XREF(void) *)&rr);
    } else switch (vt = xpr->vt()) {
    case VT_OPERATOR:
      lr = plSaveExpr(xpr->lhs());
      rr = plSaveExpr(xpr->rhs());
      px        = P(ret);
      px->left  = I(*(XREF(void) *)&lr);
      px->right = I(*(XREF(void) *)&rr);
      break;
    case VT_REFL:
      switch (xpr->rtyp) {
      case REF_UNKNOWN: {
        VerilogObj *vo  = 0;
        Unknown    *unk = vo->vd()->root->unknown_map(xpr->rrf().index);
        if (REF_UNKNOWN != unk->rtyp) switch (unk->rtyp) {
        case REF_TASK:  px->rtyp      = unk->rtyp;
                        mapTask(&unk->fnd,&px->value.rrf);
                        break;
        case REF_FUNC:  px->rtyp      = unk->rtyp;
                        mapFunc(&unk->fnd,&px->value.rrf);
                        break;
        default:        px->rtyp      = unk->rtyp;
                        px->value.rrf = unk->fnd;
        }
      } break;
      case REF_FUNC:
      case REF_TASK:
        px->rtyp      = xpr->rtyp;
        px->value.rrf = xpr->rrf();
      }
      break;
    case VT_U64:
    case VT_I64:
    case VT_INT:
    case VT_UINT:
    case VT_LUINT:
    case VT_LOGIC:
    case VT_DOUBLE:
    case VT_STRING:
       break;
    case VT_VOID:
       if (VTX_HIER & xpr->xtra) {
         long u       = (long)xpr->rhs();
         poolRef *prf = (poolRef *)allocAligned((*(long *)&px->right = u)
                                                             * sizeof(poolRef),
                                                8,&nm,ALC_PERM);
         BCOPY(xpr->val()->hrf,prf,u * sizeof(poolRef));
         px = P(ret);
         IREF2MODE(nm,&px->value.hier);
       }
       break;
    case VT_REFG:
      px->rtyp = xpr->rtyp;
      n        = xpr->rrf().index;
      if (n < 0) {
         REF_FROM_INT(nm,-n);
      } else {
         switch (xpr->rtyp) {
         case REF_ACCESS: nm.pool  = VERILOG_POOL;
                          nm.index = VER_ACCESS;
                          nm       = NullVobj->nature_map(n)->attrVal(nm);
                          break;
         case REF_MODULE: nm       = NullVobj->module_map(n)->name;
                          break;
         default:         assert(0);
         }
      }
      px->value.ref = nm;
      break;
    case VT_ALIAS:
      for (xpr2 = xpr;;) {
        xpr2 = xpr2->val()->expr;
        if (VT_ALIAS != xpr2->vt()) break;
      }
      assert(xpr2->xtra & VTX_ALIASSED);
      for (n = 0;;) {
        for (ea = Aliases; ea && ea->xpr != xpr2; ea = ea->next);
        if (ea) break;
          assert(!n++);
          XREF(plExpr) ret2 = plSaveExpr(xpr2);
          px  = P(ret);
      }
      IREF2MODE(ea->ref,&px->value);
      break;
    default:
      assert(0);
    }

  done:
    if (!vtx) xpr->xtra = VL_TYP_XTRA(xpr->xtra & ~VTX_PERM);

  } else {
    ref.pool = ref.index = 0;
    IREF2MODE(ref,&ret);
  }

alrdy_dn:
  return ret;
}

int TemplateXpPool::eval_i32(plExpr *xpr)
{
  THIS_EXPR *sxpr = (THIS_EXPR *)xpr;

  return sxpr->i32();
}

int TemplateXpPool::eval_i32(plExpr *xpr,Inst *ip)
{
  THIS_EXPR tmp;

  tmp.set(BX_VOID);

  evalExpr(ip,xpr,(plExpr *)&tmp);

  return tmp.i32();
}

int TemplateXpPool::evalRanges(Inst *ip,plExpr *xpr,rngEval *rng,int hdrm)
{
  switch (xpr->typ) {
  case VT_OPERATOR: assert(0);
  }

  BZEROP(rng);
  return 1;
}

int TemplateXpPool::evalSlice(Inst *ip,plExpr *xpr,plExpr *ret,rngEval *rng,int idxs)
{
  THIS_EXPR *expr = (THIS_EXPR *)xpr,
            *rtx  = (THIS_EXPR *)ret;
  PortTyp    pt   = PT_NONE;

  switch (expr->typ) {
  case VT_UINT:
    switch (rtx->typ) {
                       case VT_SIZE: 
                         rtx->ptd()->vt       = Pt2Vt(pt);
                         rtx->ptd()->indirect = 0; 
                         rtx->ptd()->size     = 32;
                         return 1;
    }
    assert(0);
  case VT_LUINT:
    switch (rtx->typ) {
                       case VT_SIZE: 
                         rtx->ptd()->vt       = Pt2Vt(pt);
                         rtx->ptd()->indirect = 0; 
                         rtx->ptd()->size     = expr->pval()->lgc.w;
                         return 1;
    }
    assert(0);
  case VT_REFL: {
    int             i = expr->rtyp,
                    p = expr->rrf().index,
                    o;
    AttrType        at;
    MAX_PLATTR_OBJ *pu;
    plUnknown      *unk;

    switch (i) {
    case REF_PORT:     if (rtx->constant()) {
                         return 0;
                       }
                       switch (rtx->typ) {
                       case VT_SIZE: {
                         RngVec  *rvp;
                         int      w0 = ip->portWidthInst(p,&pt,&rvp),
                                  ws = ip->sliceWidth(rvp,rng,idxs);
                         rtx->ptd()->vt       = Pt2Vt(pt);
                         rtx->ptd()->indirect = 0; 
                         rtx->ptd()->size     = ws;
                       } return 1;
                       default:
                         assert(0);
                       }
    }
    }
  default: assert(0);
  }

  return 1;
}

int TemplateXpPool::evalExpr(Inst *ip,plExpr *xpr,
			              plExpr *ret) // set base-expr
{
  THIS_EXPR *expr = (THIS_EXPR *)xpr,
            *rtx  = (THIS_EXPR *)ret;
  ePrcsn     prcsn;
  THIS_EXPR  tx;
  int        c;
  opTyp      otx  = OT_UNSET;

re_eval:
  switch (expr->typ) {
  default:
    goto coerce;
  case VT_REFL: {
    int             i = expr->rtyp,
                    p = expr->rrf().index,
                    o;
    AttrType        at;
    MAX_PLATTR_OBJ *pu;
    plUnknown      *unk;

  retry:
    switch (i) {
    case REF_PORT:     if (rtx->constant()) {
                         return 0;
                       }
                       switch (rtx->typ) {
                       case VT_SIZE: {
                         PortTyp pt = PT_NONE;
                         int     w  = ip->portWidthInst(p,&pt);
                         rtx->ptd()->vt       = Pt2Vt(pt);
                         rtx->ptd()->indirect = 0; 
                         rtx->ptd()->size     = w;
                       } return 1;
                       default:
                         assert(0);
                       }
                       assert(NIY("Runtime Port Access"));
    case REF_PARM:     pu  = P(parm);
                       pu += p;
                       at  = (AttrType)pu->typ;
                       if ((o = ip->findOvrrd(p)) >= 0) {
                         *tx.bx()   = ip->po[o].bx;
                         *tx.pval() = ip->po[o].val;
                         c = tx.coerce(rtx->bx(),rtx->pval());
                       } else {
                         if (at & ATTR_USR) {
                           tx.set_val(&pu->value);
                         } else {
                           assert(("Shouldn't have any non-user attributes",0));
                         }
                         switch(tx.typ = ATTR_VT(at)) {
                         case VT_VOID: assert(0);
                         case VT_EXPR: c = evalExpr(ip,P(tx.pval()->xpr),ret);
                                       break;
                         default:      c = evalExpr(ip,tx.pl(),ret);
                         }
                       }
                       if (c && (at & ATTR_RNGD)) {
                         plRngdAttr *pra = (plRngdAttr *)pu;
                         plRange    *pr  = P(pra->rng);
                         p = pra->rngs;
                         while (p-- > 0) {
                           THIS_EXPR  lim,
                                     *rx = (THIS_EXPR *)P(pr[p].range);
                           int        t,
                                      ex = pr[p].exclude;
                           switch (rx->opr()->self) {
                           case OPR_RANGE:
                             evalExpr(ip,rx->pl_lhs(this),lim.pl());
                             t = checkRange(ip,pr[p].inc_strt, 1,lim.pl(),ret);
                             if (!t || (t && ex)) goto out;
                             lim.set(BX_VOID);
                             evalExpr(ip,rx->pl_rhs(this),lim.pl());
                             t = checkRange(ip,pr[p].inc_fnsh,-1,lim.pl(),ret);
                             break;
                           default:
                             evalExpr(ip,rx->pl(),lim.pl());
                             t = checkRange(ip,1, 0,lim.pl(),ret);
                           }
                           if (!t || (t && ex)) {
                           out:
                             ErrorMsg(S_ERROR(STS_ARITH),
                                      "Parameter %s out of range (%g)",
                                      strDeref(pra->nm),rtx->dbl());
                             return 0;
                           }
                         }
                       }
                       if (o >= 0) goto coerced;
                       return c;
    }
    break;}
  case VT_OPERATOR: {
      OPR        op  = expr->val()->op;
      plExpr    *plr = expr->pl_rhs(this),
                *pll = expr->pl_lhs(this);

      THIS_EXPR  l(rtx->constant()),
                 r(rtx->constant());

      if (pll) {

        switch (rtx->vt()) {
        case VT_SIZE: l.set(BX_SIZE);
                      r.set(BX_SIZE);
                      switch (op) {
                      case OPR_B_OR:
                      case OPR_B_AND: 
                        if (evalExpr(ip,plr,r.pl()) > 0 &&
                            evalExpr(ip,pll,l.pl()) > 0) {
                          fixTypDesc(l.ptd(),r.ptd(),rtx->ptd());
                          return 1;
		        }                                       
                        return 0;
		      }
                      case OPR_INDEX: {
                        rngEval rngs[8];
                        int     idxs = evalRanges(ip,plr,rngs,8);                        
                        return  evalSlice(ip,pll,ret,rngs,idxs);
                      }
	              assert(0);
        }

        switch (op) {
        case OPR_CALL:  { int n = 0;
     	                  for (expr = (THIS_EXPR *)plr; expr ;) {
                            if (OPR_LIST1 == expr->op()) {
                              n++;
                              expr = expr->rhs(this);
                            } else {
                              n++;
                              break;
                            }
	                  }
                          TMPARR(THIS_EXPR,Args,n);
                          n = 0;
	                  for (c = 1,expr = (THIS_EXPR *)plr; expr && c;) {
                            if (OPR_LIST1 == expr->op()) {
                              c = evalExpr(ip,expr->pl_lhs(this),
                                           Args[n++].pl());
                              expr = expr->rhs(this);
                            } else {
                              c = evalExpr(ip,expr->pl(),Args[n++].pl());
                              break;
                            }
	                  }
                          if (!c) return 0;
                          *l.pl() = *pll;
                          if (!l.makeCall(ip,pll,n,Args)) return 0;
                        }
	                c = l.coerce(rtx->bx(),rtx->pval());
                        goto coerced;
	case OPR_QMARK: if (!evalExpr(ip,pll,l.pl())) return 0;
                        expr = (THIS_EXPR *)plr;
                        assert(OPR_CHOICE == expr->opr()->self);
                        if (l.i32()) {
                          xpr = expr->pl_lhs(this);
                        } else {
                          xpr = expr->pl_rhs(this);
                        }
                        return evalExpr(ip,xpr,ret);
        case OPR_LIST1: switch (rtx->vt()) {
	                case VT_SIZE: 
                          if (!evalExpr(ip,pll,l.pl())) return 0; 
                          if (!evalExpr(ip,plr,r.pl())) return 0; 
                          rtx->ptd()->size     = l.i32() + r.i32();
			  rtx->ptd()->indirect = 0;
                          fixTypDesc(l.ptd(),r.ptd(),rtx->ptd());
			  return 1;
	                }
	                break;
        case OPR_NCAT:  switch (rtx->vt()) {
	                case VT_SIZE: 
                          if (!evalExpr(ip,pll,l.pl())) return 0; 
                          if (!evalExpr(ip,plr,r.pl())) return 0; 
                          rtx->ptd()->size     = l.i32() * r.i32();
			  rtx->ptd()->indirect = 0;
                          fixTypDesc(l.ptd(),r.ptd(),rtx->ptd());
			  return 1;
	                }
	                break;
        case OPR_RHT_SH:
        case OPR_LFT_SH:switch (rtx->vt()) {
	                case VT_SIZE: 
                          return evalExpr(ip,pll,ret);
	                }
	                break;
        }

        if (!evalExpr(ip,pll,l.pl())) return 0;
        if (!evalExpr(ip,plr,r.pl())) return 0;

        switch (op) {
        case OPR_RANGE: tx.set(BX_RANGE);
                        tx.pval()->r[0] = l.i32();
                        tx.pval()->r[1] = r.i32();
                        if (l.constant() && r.constant()) {
                          tx.xtra = VL_TYP_XTRA(tx.xtra|VTX_CONST);
                        }
                        goto coerce_tx;
        }

        switch (prcsn = rtx->normalize(l.bx(),r.bx())) {
        case PRSN_BIT: {tx.bx()->set(BX_INTEGER);
                        switch (expr->val()->op) {
#                         define OPR_EVAL_DATA .tru()
#                         define OPR_SET_DATA  .pval()->i
#                         define OPR_EVAL(c,s,ret,data,op0,lhs,data1,op,rhs,data2,ot,cls)\
                          case c: ret data op0 lhs data1 op rhs data2 cls;\
                                  goto coerce_tx;
#                         define OPR_BIT_OK
#                         include "bi_op_eval.inc"
                        }
                        break;}
        case PRSN_32:  {tx.bx()->set(BX_INTEGER);
                        switch (expr->val()->op) {
#                         define OPR_EVAL_DATA .i32()
#                         define OPR_SET_DATA  .pval()->i
#                         define OPR_EVAL(c,s,ret,data,op0,lhs,data1,op,rhs,data2,ot,cls)\
                          case c: ret data op0 lhs data1 op rhs data2 cls;\
                                  goto coerce_tx;
#                         define OPR_BIT_OK
#                         include "bi_op_eval.inc"
                        }
                        break;}
        case PRSN_64:  {tx.bx()->set(BX_SGND64);
                        switch (expr->val()->op) {
#                         define OPR_EVAL_DATA .i64()
#                         define OPR_SET_DATA  .pval()->i64
#                         define OPR_EVAL(c,s,ret,data,op0,lhs,data1,op,rhs,data2,ot,cls)\
                          case c: ret data op0 lhs data1 op rhs data2 cls;\
                                  goto coerce_tx;
#                         define OPR_BIT_OK
#                         include "bi_op_eval.inc"
                        }
                        break;}
        case PRSN_DOUBLE:
                       {tx.bx()->set(BX_DOUBLE);
                        switch (expr->val()->op) {
#                         define OPR_EVAL_DATA .dbl()
#                         define OPR_SET_DATA .pval()->d
#                         define OPR_EVAL(c,s,ret,data,op0,lhs,data1,op,rhs,data2,ot,cls)\
                          case c: ret data op0 lhs data1 op rhs data2 cls;\
                                  goto coerce_tx;
#                         include "bi_op_eval.inc"
                        }
                        break;}
        case PRSN_LOGIC:
                       {tx.bx()->set(BX_LOGIC);
                        switch (expr->val()->op) {
#                         define OPR_EVAL_DATA .pl()
#                         define OPR_EVAL(c,s,ret,data,op0,lhs,data1,op,rhs,data2,ot,cls)\
                          case c: tx.logic##s(lhs data1,rhs data2);\
                                  goto coerce_tx;
#                         define OPR_BIT_OK
#                         include "bi_op_eval.inc"
                        }
                        break;}
        case PRSN_SLICE:
                       {tx.bx()->set(BX_LOGIC);
                        switch (expr->val()->op) {
#                         define OPR_EVAL_DATA .pl()
#                         define OPR_EVAL(c,s,ret,data,op0,lhs,data1,op,rhs,data2,ot,cls)\
                          case c: tx.slice##s(lhs data1,rhs data2);\
                                  goto coerce_tx;
#                         include "slice_op_eval.inc"
                        }
                        break;}
        }
      } else {

        switch (op) {
        case OPR_SUB:   return evalExpr(ip,plr,ret);
        }

        switch (rtx->vt()) {
        case VT_SIZE:
                      switch (op) {
                      case OPR_UB_EQ1:
                      case OPR_UB_EQ2:
                      case OPR_UB_RD_AND:
                      case OPR_UB_RD_OR:  rtx->ptd()->vt       = VT_BOOL;
                                          rtx->ptd()->indirect = 0;
                                          rtx->ptd()->size     = 1;
                                          return 1;
		      }
                      return evalExpr(ip,plr,ret);
        }

        if (!evalExpr(ip,plr,r.pl())) return 0;

        prcsn = rtx->normalize(r.bx());

        switch (prcsn) {
        case PRSN_BIT:{tx.bx()->set(BX_BOOL);
                       switch (expr->val()->op) {
#                        define OPR_EVAL_DATA .tru()
#                        define OPR_SET_DATA  .pval()->i
#                        define OPR_EVAL(c,s,ret,data,op0,lhs,data1,op,rhs,data2,ot,cls)\
                         case c: ret data op0 op rhs data2 cls;\
                                 goto coerce_tx;
#                        define OPR_BIT_OK
#                        include "uni_op_eval.inc"
                       }
                       break;}
        case PRSN_32: {tx.bx()->set(BX_INTEGER);
                       switch (expr->val()->op) {
#                        define OPR_EVAL_DATA .i32()
#                        define OPR_SET_DATA  .pval()->i
#                        define OPR_EVAL(c,s,ret,data,op0,lhs,data1,op,rhs,data2,ot,cls)\
                         case c: ret data op0 op rhs data2 cls;\
                                 goto coerce_tx;
#                        define OPR_BIT_OK
#                        include "uni_op_eval.inc"
                       }
                       break;}
        case PRSN_64: {tx.bx()->set(BX_SGND64);
                       switch (expr->val()->op) {
#                        define OPR_EVAL_DATA .i64()
#                        define OPR_SET_DATA  .pval()->i64
#                        define OPR_EVAL(c,s,ret,data,op0,lhs,data1,op,rhs,data2,ot,cls)\
                         case c: ret data op0 op rhs data2 cls;\
                                 goto coerce_tx;
#                        define OPR_BIT_OK
#                        include "uni_op_eval.inc"
                       }
                       break;}
        case PRSN_DOUBLE:
                      {tx.bx()->set(BX_DOUBLE);
                       switch (expr->val()->op) {
#                        define OPR_EVAL_DATA .dbl()
#                        define OPR_SET_DATA  .pval()->d
#                        define OPR_EVAL(c,s,ret,data,op0,lhs,data1,op,rhs,data2,ot,cls)\
                         case c: ret data op0 op rhs data2 cls;\
                                 goto coerce_tx;
#                        include "uni_op_eval.inc"
                       }
                       break;}
        case PRSN_LOGIC:
                      {tx.bx()->set(BX_LOGIC);
                       switch (expr->val()->op) {
#                        define OPR_EVAL_DATA  .pl()
#                        define OPR_EVAL(c,s,ret,data,op0,lhs,data1,op,rhs,data2,ot,cls)\
                         case c: ret.logic##s(rhs data2);\
                                 goto coerce_tx;
#                        define OPR_BIT_OK
#                        include "uni_op_eval.inc"
                       }
                       break;}
        }
      }
      assert(NIY("evalExpr/operator"));
    }
    assert(NIY("evalExpr/value"));
  }
  return 0;

coerce_tx:
  expr = &tx;
coerce:
  c = expr->coerce(rtx->bx(),rtx->pval());
coerced:
  switch (c) {
  case  1: return 1;
  case -1: ErrorMsg(S_WARNING(STS_ARITH),
                    "Convertion from %s to %s out of range",
                    expr->typ_name(),rtx->typ_name());
           break;
  default:
           ErrorMsg(S_ERROR(STS_ARITH),
                    "Can't convert from %s to %s",
                    expr->typ_name(),rtx->typ_name());
  }
  return 0;
}

int TemplateXpPool::checkRange(Inst *ip,int inc,int dirn,plExpr *range,plExpr *val)
{
  THIS_EXPR r,
            v;

  evalExpr(ip,val,  v.pl());
  evalExpr(ip,range,r.pl());

  int t = (r.dbl() == v.dbl())
        ? inc
        : (r.dbl() < v.dbl()) ?  dirn
                              : -dirn;
  return t > 0;
}

void TemplateXpPool::mapFunc(rrfTup *old,rrfTup *svd)
{
  assert(("Inappropriate virtual func. call",0));
}

void TemplateXpPool::mapTask(rrfTup *old,rrfTup *svd)
{
  assert(("Inappropriate virtual func. call",0));
}
