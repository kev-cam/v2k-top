#!/usr/bin/perl -s

@Qual  = ("/*signed*/","u");
@Types = ("int8_t","int16_t","int32_t","int64_t");

$Size{"int8_t"}     =  8;
$Size{"int16_t"}    = 16;
$Size{"int32_t"}    = 32;
$Size{"int64_t"}    = 64;

$Qdef{"/*signed*/"} = "S";
$Qdef{"u"}          = "U";

$Vdef{"int8_t"}     = "I8";
$Vdef{"int16_t"}    = "I16";
$Vdef{"int32_t"}    = "I32";
$Vdef{"int64_t"}    = "I64";
$Vdef{"_SimTime"}   = "SIM_TIME";

$func  = "";
$proto = "";

open(UNI, $uni)     or die;
open(CODE,">$code") or die;
open(BI,  $bi)      or die;
open(HDR, ">$hdr")  or die;

while (<UNI>)
{
  last if (/\* RESET \*/);

    s+/\*.*\*/++;
    if (! /^#/) {
      while (/__.__/) {
        $x = substr($&,2,1);
        s/$&/\$$x/;
      }
    }
    if (/INLINE_ARITH/) {
      $func = $func.$_;
      s/INLINE_ARITH //;
      chomp;
      if (/^(void|_SimTmp)/) {$proto = $proto."template<> ";}
      $proto = $proto.$_.";\n";
    } elsif (/ALWAYS_INLINE/) {
      s/ALWAYS_INLINE/inline/;
      $proto = $proto.$_;
      while (<UNI>) {
        while (/__..__/) {
          $x = substr($&,2,2);
          s/$&/\$$x/;
        }
        $proto = $proto.$_;
        last if (/^}/);
      }
    } elsif (/^#/) {
      $func  = $func.$_;
      $proto = $proto.$_;
    } else {
      $func  = $func.$_;
    } 
}

$W  = 1;
$D  = 1;
$sl = 1;
foreach $Q (@Qual) {
  foreach $v (@Types) {
    $V = $Q.$v;
    $s = $Size{$v};
    for ($B = $sl; $B <= $s; $B++) {
      eval "print HDR \"$proto\"";
      printf CODE "\n#define OVRLDOP_U_$Qdef{$Q}_$Vdef{$v}_%d_%d_%d\n",$B,$W,$D;
      eval "print CODE \"$func\"";
    }
    $sl = $B;
  }
  $sl = 1;
}

$func  = "";
$proto = "";

while (<BI>)
{
  last if (/\* RESET \*/);

    s+/\*.*\*/++;
    while (/__..__/) {
      $x = substr($&,2,2);
      s/$&/\$$x/;
    }
    if (/INLINE_ARITH/) {
      $func = $func.$_;
      s/INLINE_ARITH //;
      chomp;
      $proto = $proto.$_.";\n";
    } elsif (/ALWAYS_INLINE/) {
      s/ALWAYS_INLINE/inline/;
      $proto = $proto.$_;
      while (<BI>) {
        while (/__..__/) {
          $x = substr($&,2,2);
          s/$&/\$$x/;
        }
        $proto = $proto.$_;
        last if (/^}/);
      }
    } elsif (/^#/) {
      $func  = $func.$_;
      $proto = $proto.$_;
    } else {
      $func  = $func.$_;
    }
}


$W1 = 1;
$W2 = 1;
$WX = 1;
$D1 = 1;
$D2 = 1;

$S1 = 1;
foreach $Q1 (@Qual) {
  foreach $v1 (@Types) {
    $V1 = $Q1.$v1;
    $B1 = $Size{$v1};
    $S2 = 1;
    foreach $Q2 (@Qual) {
      foreach $v2 (@Types) {
        $V2 = $Q2.$v2;
        $B2 = $Size{$v2};
        $SX = 1 - ($S1 || $S2);
        $QX = $Qual[$SX];
        if ($B1 > $B2)  {$VX = $QX.$v1; $BX = $B1;}
        else            {$VX = $QX.$v2; $BX = $B1;}
        printf HDR "\n#define OVRLDOP_B_$Qdef{$Q1}_$Vdef{$v1}_%d_%d_%d__$Qdef{$Q2}_$Vdef{$v2}_%d_%d_%d\n",$B1,$W1,$D1,$B2,$W2,$D2;
        eval "print HDR \"$proto\"";
        printf CODE "\n#define OVRLDOP_B_$Qdef{$Q1}_$Vdef{$v1}_%d_%d_%d__$Qdef{$Q2}_$Vdef{$v2}_%d_%d_%d\n",$B1,$W1,$D1,$B2,$W2,$D2;
        eval "print CODE \"$func\"";
      }
      $S2 = 0;
    }
  }
  $S1 = 0;
}
