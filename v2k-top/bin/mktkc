#!/usr/bin/perl -s
# Copyright (c) 1998,1999,2001,2002 Kevin Cameron
# Distributed under the GNU Lesser General Public License
# RCS ID: $Id: mktkc,v 1.25 2009/05/22 23:33:16 dkc Exp $
 
if ("" eq $language || !defined $language)   {die "Need language setting";}

if (defined $info) {
    open(INFO,$info) or die "$! - $info";
    while (<INFO>) {
        if (/FXD_POOL\((.*),\s*$language\)/) {
	    ($prefix,$Language,$LANGUAGE) = split /,\s*/,$1;
            last;
	}
    }
} else {
    $_ = $language;
    if (/^\//) {
	@pth = split '/';
	$language = $pth[$#pth];
	undef $pth[$#pth];
	$_ = join '/',@pth;
	chdir $_;
	print STDERR "cd'd to ".`pwd`."\n";
	exec "mk","-fast","$language.th";
    }
    tr /a-z/A-Z/;
    $LANGUAGE = $_;
    $Language = substr($LANGUAGE,0,1).substr($language,1);
}

if ("" eq $prefix   || !defined $prefix)     {die "Need prefix setting";}


$keep = $ENV{KEEP_SAME};

if (defined $include) {
    $include .= "/";
} else {
    $include  = "";
}

open(HDR,">".$include.$language."-i.h-tmp-$$");
open(IC, ">".$language."-i.c-tmp-$$");
open(H,  ">".$include.$language."-t.h-tmp-$$");
open(CPP,">".$language."-t.cpp-tmp-$$");

$prfx_ext = "";

print HDR "#ifndef TOK_TABLE\n",
          "#  define TOK_TABLE\n",
          "#  ifdef ${prefix}DECL\n",
          "typedef struct {const char *name; tokPI id;} tokTable;\n",
          "#  else\n",
          "typedef struct {const char *name; Token id;} tokTable;\n",
          "#  endif\n",
          "#endif\n",
          "#ifndef ${prefix}POOL_BASE\n",
          "#define ${prefix}POOL_BASE 0x100\n",
          "#endif\n",
          "extern const tokTable ${prefix}tokens[];\n",
          "typedef enum {\n";
print IC  "#include <poolmngr.h>\n",
          "const tokTable ${prefix}tokens[] = {\n";
print CPP "#define TokPool    ${language}TokPool\n",
          "#define Tok_tokens ${prefix}tokens\n",
          "#define LANGUAGE   ".'"'.$Language.'"'."\n",
          "#define POOL       ${LANGUAGE}_POOL\n",
          "#define InitTok    Init${Language}Tok\n",
          "#define NEED_${LANGUAGE}\n",
          "#define ${prefix}DECL\n",
          "#include \"tokpool.h\"\n";

open(ICC,"language.icc");
while(<ICC>){
    print CPP $_;
}

$align = 2;
$l_sz  = 2;
$idx   = 0;
$lstn  = "_0";
$index = 0;

while (<STDIN>) {
    chomp;
    if (/\[.*\]/) {
	s/(\[|\])//g;
	$prfx_ext = $_;
    } elsif (/^##/ || !/^#/) {
        if (/^##/) {
	    $_ = substr $_,1;
        }
	@flds = split;
        if (1 == @flds) {
	    $str  = $_;
	} else {
	    $str  = $flds[0];
	    $_    = $flds[1];
        }
	tr /[a-z]`$/[A-Z]__/;
        $name = $_;
        $l = length($str);
        if ('\\' eq substr $str,0,1) {$l--;}
        print HDR $prefix.$prfx_ext.$_,
                  "\t= TOK_INDEX(${prefix},$name,$lstn,$index), /* ",
                  $l," */\n";
        print HDR '#define TOK_'.$prefix.$prfx_ext.$name." ",
                  $prefix."tokens[".$idx."].id\n";
        $idx++;
        if ("_" eq $str) {$str = ' ';}
        
        print IC '{"'.$str; # "
        
        $l++;
        while ($l & ($align-1)) { $l++; }
   
        $index += ($l + $l_sz);
        print IC '",'."\n\t {".$LANGUAGE."_POOL,".$prefix.$prfx_ext.$name."}},\n"; # "
        $lstn = $name;
    }
}

print HDR $prefix."LAST\t= $index\n} e".$prefix."TOK;\n";
print IC  "{0,{0,0}}};\n";

print H  "#ifndef ${prefix}H\n",
         "#define ${prefix}H\n",
         "# ifdef NEED_$LANGUAGE\n",
         '#  include "'.$language.'-i.h"'."\n",
         "#  ifdef ${prefix}DECL\n",
         '#   include "'.$language.'-i.c"'."\n",
         "#  endif\n",
         "# endif\n",
         "#endif\n";

$updates = 0;

close(HDR); update($include.$language."-i.h-tmp-$$",  $include.$language."-i.h");
close(IC);  update($language."-i.c-tmp-$$",  $language."-i.c");
close(H);   update($include.$language."-t.h-tmp-$$",  $include.$language."-t.h");
close(CPP); update($language."-t.cpp-tmp-$$",$language."-t.cpp");

sub update ($@)
{
    my $tmp = $_[0];
    my $old = $_[1];

    if ($keep) {
	open(NEW,$tmp);
	if (!open(OLD,$old)) {
	    print STDERR "Creating $old\n";
	    rename $tmp,$old; $updates++;
	    return;
	};

	while (<NEW>) {
	    $l = <OLD>;
	    if ($_ ne $l) {
		print STDERR "Updating $old\n";
		rename $tmp,$old; $updates++;
		return;
	    }
	}
	if (<OLD>) {
	    print STDERR "Updating $old\n";
	    rename $tmp,$old; $updates++;
	}

	print STDERR "Unchanged: $old\n";
	unlink $tmp;
    }

    rename $tmp,$old; $updates++;
}

if ($updates && defined $lib && -f "$lib/$Language.tok") {
    print STDERR "Removing $lib/$Language.tok\n";
    unlink "$lib/$Language.tok";
}

