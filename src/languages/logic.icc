/* Copyright (c) 1998-2007 Kevin Cameron */
/* Distributed under the GNU Lesser General Public License */
/* RCS ID: $Id: logic.icc,v 1.14 2007/02/01 06:49:08 dkc Exp $ */
  


#define UNI_CASE \
  Expr *xr  = (Expr *)rhs;\
  switch (xr->typ) {\
  case VT_HIGHZ:\
  case VT_UNKNOWN:\
  case VT_DONTCARE: copyUnique(xr);\
                    return 1;

#define BI_CASE_INDX(lhs,rhs,w) \
  Expr *xr = (Expr *)rhs,\
       *xl = (Expr *)lhs;\
  switch (xl->typ) {\
  case VT_HIGHZ:\
  case VT_UNKNOWN:\
  case VT_DONTCARE: *bx()   = *xl->bx();\
                    ASSERT(w);\
                    value.i = w;\
                    return 1;

#define BI_REORDER \
  Expr *xr = (Expr *)rhs,\
       *lr = (Expr *)lhs,*tmp;\
  if (xr->typ != lr->typ &&\
      Precision[xr->typ] > Precision[lr->typ]) {\
                  tmp = xr; xr = lr ; lr = tmp;} // swap

#define UNI_CASE_END }
#define BI_CASE_END  }

int Expr::logicPlus(PARM_EXPR *lhs,PARM_EXPR *rhs)
{
  assert(0);
  return 0;
}

int Expr::logicMinus(PARM_EXPR *lhs,PARM_EXPR *rhs)
{
  assert(0);
  return 0;
}

int Expr::logicDivide(PARM_EXPR *lhs,PARM_EXPR *rhs)
{
  assert(0);
  return 0;
}

int Expr::logicMultiply(PARM_EXPR *lhs,PARM_EXPR *rhs)
{
  assert(0);
  return 0;
}

int Expr::logicGT(PARM_EXPR *lhs,PARM_EXPR *rhs)
{
  assert(0);
  return 0;
}

int Expr::logicLT(PARM_EXPR *lhs,PARM_EXPR *rhs)
{
  assert(0);
  return 0;
}

int Expr::logicGE(PARM_EXPR *lhs,PARM_EXPR *rhs)
{
  assert(0);
  return 0;
}

int Expr::logicLE(PARM_EXPR *lhs,PARM_EXPR *rhs)
{
  assert(0);
  return 0;
}

int Expr::logicL_EQ(PARM_EXPR *lhs,PARM_EXPR *rhs)
{
  BI_REORDER

  switch(lr->typ) {
  case BX_NC:    set_bx(BX_BOOL);
                 value.i = 0;
                 return 1;
  case BX_LOGIC:
  default:       assert(0);
  }

  return 0;
}

int Expr::logicLSH(PARM_EXPR *lhs,PARM_EXPR *rhs)
{
  Expr *xr = (Expr *)rhs,
       *lr = (Expr *)lhs,
        shft(BX_INTEGER);

  if (xr->coerce(shft.bx(),shft.pval())) {
    int s = shft.value.i;
    if (s <= 0) {
      copy(lr);
      return 1;
    } else {
      Expr bits(BX_SIZE);
      if (lr->coerce(bits.bx(),bits.pval())) {
        int w = bits.value.i;
        BITS2LWORDS(w);
        if (lr->coerce(bx()->set(BX_LOGIC),pval(),(void **)nonXleft(),
                                                  (void **)&POINTER(right))) {
          int    s2,
                 w2;

          while (s2 = s) {
            U64    carry[4];
            plQzx *pqzx = (plQzx *)POINTER(right);

            if (s2 > 64) s2 = 64;
            s -= s2;

            BZERO(carry,sizeof(carry));

            for (w2 = 0; w2 < w ; w2++) {
              U64 *pd = &pqzx->n;
              int  i;

              for (i = 0; i < 4 ; i++) {
                U64 self = pd[i];
                pd[i]  <<= s2;
                pd[i]   |= carry[i];
                carry[i] = self >> (64 - s2);
              }
            }
          }
        }
      }
      goto ok;
    }
  }

  assert(0);

ok:
  return 1;
}

int Expr::logicRSH(PARM_EXPR *lhs,PARM_EXPR *rhs)
{
  assert(0);
  return 0;
}

int Expr::logicIndex(PARM_EXPR *lhs,PARM_EXPR *rhs)
{
  BI_CASE_INDX(lhs,rhs,1)
  BI_CASE_END

  assert(0);
  return 0;
}

int Expr::logicNCat(PARM_EXPR *lhs,PARM_EXPR *rhs)
{
  assert(0);
  return 0;
}

int Expr::logicNegate(PARM_EXPR *rhs)
{
  UNI_CASE
  UNI_CASE_END

  assert(0);
  return 0;
}

int Expr::logicNot(PARM_EXPR *rhs)
{
  UNI_CASE
  UNI_CASE_END

  assert(0);
  return 0;
}

int Expr::logicBitNeg(PARM_EXPR *rhs)
{
  UNI_CASE
  UNI_CASE_END

  assert(0);
  return 0;
}

int Expr::nCat(PARM_EXPR *lhs,PARM_EXPR *rhs)
{
  Expr *xpr = (Expr *)lhs;
  int   n   = xpr->i32();

  assert(0);
  return 0;
}

int Expr::bitSelect(PARM_EXPR *lhs,PARM_EXPR *rhs)
{
  BI_CASE_INDX(lhs,rhs,1)
  BI_CASE_END

  assert(0);
  return 0;
}

#define QUICK_LOGIC if (lhs->typ == rhs->typ) {\
                      BI_CASE_INDX(lhs,rhs,max(xl->value.i,xr->value.i))\
                      BI_CASE_END}

int Expr::logicBAnd(PARM_EXPR *lhs,PARM_EXPR *rhs)
{
  QUICK_LOGIC

  BI_REORDER

  switch(lr->typ) {
  case VT_UNKNOWN: switch (xr->typ) {
                   case VT_INT:
                   case VT_BOOL:  set_bx(BX_LOGIC);
                                  value.lgc.i = 0;
                                  value.lgc.w = 1;
                                  value.lgc.b = 2;
                                  return 1;
                   case VT_LOGIC: copyUnique(xr);
                                  ASSERT(value.lgc.w);
                                  return 1;
                   }
  }

  assert(0);
  return 0;
}

int Expr::logicBOr(PARM_EXPR *lhs,PARM_EXPR *rhs)
{
  QUICK_LOGIC

  BI_REORDER

  switch(lr->typ) {
  case VT_UNKNOWN: switch (xr->typ) {
                   case VT_INT:
                   case VT_BOOL:  set_bx(BX_LOGIC);
                                  value.lgc.i = 0;
                                  value.lgc.w = 1;
                                  value.lgc.b = 2;
                                  return 1;
                   case VT_LOGIC: copyUnique(xr);
                                  ASSERT(value.lgc.w);
                                  return 1;
                   }
  }

  assert(0);
  return 0;
}

int Expr::sliceIndex(PARM_EXPR *lhs,PARM_EXPR *rhs)
{
  BI_CASE_INDX(lhs,rhs,xr->rng_wdth())
  BI_CASE_END

  assert(0);
  return 0;
}
