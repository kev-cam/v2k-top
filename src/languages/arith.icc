/* Copyright (c) 1998-2007 Kevin Cameron */
/* Distributed under the GNU Lesser General Public License */
/* RCS ID: $Id: arith.icc,v 1.21 2007/02/01 06:49:08 dkc Exp $ */
  


double Expr::eval_dbl() const
{
  double l,r;

  if (rhs()) r = rhs()->dbl();

  switch(value.op) {
  case OPR_UMINUS: return -r;
  default:;
  }
  l = lhs()->dbl();
  switch(value.op) {
  case OPR_MINUS:  return l-r;
  default:;
  }

  assert(0);
  return 0;
}

U64 Expr::eval_U64() const
{
  assert(0);
  return 0;
}

I64 Expr::eval_I64() const
{
  I64 l,r;

  if (rhs()) r = rhs()->u64();

  switch(value.op) {
  case OPR_UMINUS: return -r;
  default:;
  }
  l = lhs()->u64();
  switch(value.op) {
  case OPR_MINUS:  return l-r;
  default:;
  }

  assert(0);
  return 0;
}

U64 Expr::dbl2U64() const
{
  return value.d;
}

I64 Expr::dbl2I64() const
{
  return value.d;
}

int Expr::coerce(BaseExpr *bxr,Value *vlr,void **p_lhs,void **p_rhs)
{
  int width = 32;

#define SET_TD(typ,sz,ind) vlr->td.size     = sz;\
                           vlr->td.vt       = typ;\
                           vlr->td.indirect = ind;
  switch (typ) {
  case VT_RANGE:  switch (bxr->typ) {
                  case VT_RANGE:
                  case VT_VOID:   goto same;
                  default:;
                  }
                  break;
  case VT_LOGIC:  switch (bxr->typ) {
                  case VT_SIZE:   SET_TD(VT_LOGIC,lgcWdth(),0);
                                  goto done;
                  case VT_VOID:   goto same;
                  default:;
                  }
                  break;
  case VT_ULOGIC: switch (bxr->typ) {
                  case VT_SIZE:   SET_TD(VT_LOGIC,lgcWdth(),0);
                                  goto done;
                  case VT_VOID:   goto same;
                  default:;
                  }
                  break;
  case VT_STRING: switch (bxr->typ) {
                  case VT_SIZE:   SET_TD(VT_STRING,-1,1);
                                  goto done;
                  case VT_VOID:   goto same;
                  default:;
                  }
                  break;
  case VT_UNKNOWN:switch (bxr->typ) {
                  case VT_LOGIC:  if (p_lhs) {
                                    int w       = value.i,
                                        bnw     = BASE_N_WIDTH(1,16,w);
                                    BITS2LWORDS(w);
                                    plQzx *pqzx = CALLOC2(w,plQzx);
                                    while (w-- >0) {
                                      pqzx[w].x = ~0;
                                    }
                                    *p_rhs = pqzx;
                                    *p_lhs = DATA2PTR(bnw);
                                    goto done;
                                  }
                  case VT_VOID:   goto same;
                  case VT_SIZE:   SET_TD(VT_UNKNOWN,value.i,0);
                                  goto done;
                  default:;
                  }
                  break;
  case VT_U64:    switch (bxr->typ) {
                  case VT_SIZE:   SET_TD(VT_U64,64,0); goto done;
                  case VT_SCALAR:
                  case VT_VOID:
                  case VT_U64:    goto same;
                  case VT_I64:    if (value.i64 < 0) goto fits;
                                  goto ok;
                  case VT_UINT:   vlr->u = 0xFFFFFFFF;
		                  if (value.u64 > vlr->u) return -1;
                                  vlr->u = value.u64;
                                  goto done;
                  case VT_INT:    vlr->i = 0x7FFFFFFF;
                                  if (value.u64 > vlr->i) return -1;
                                  vlr->i = value.u64;
                                  goto done;
                  default:;
                  }
                  break;
  case VT_I64:    switch (bxr->typ) {
                  case VT_SIZE:   SET_TD(VT_I64,64,0); goto done;
                  case VT_SCALAR:
                  case VT_VOID:
                  case VT_I64:    goto same;
                  case VT_U64:    if (value.i64 < 0) goto fits;
                                  goto ok;
                  case VT_UINT:   vlr->u = 0;
                                  if (value.i64 < vlr->u) return -1;
                                  vlr->u = 0xFFFFFFFF;
		                  if (value.i64 > vlr->u) return -1;
                                  vlr->u = value.i64;
                                  goto done;
                  case VT_INT:    vlr->i = 0x7FFFFFFF;
                                  if (value.i64 > vlr->i) return -1;
                                  vlr->u = 0x80000000;
                                  if (value.i64 < vlr->i) return -1;
                                  vlr->i = value.i64;
                                  goto done;
                  default:;
                  }
                  break;
  case VT_DOUBLE: switch (bxr->typ) {
                  case VT_SIZE:   SET_TD(VT_DOUBLE,64,0); goto done;
                  case VT_SCALAR:
                  case VT_VOID:
                  case VT_DOUBLE: goto same;
                  case VT_UINT:   vlr->u = 0;
                                  if (value.d < vlr->u - 0.5) return -1;
                                  vlr->u = 0xFFFFFFFF;
		                  if (value.d > vlr->u + 0.5) return -1;
                                  vlr->u = value.d;
                                  goto done;
                  case VT_INT:    vlr->i = 0x7FFFFFFF;
                                  if (value.d > vlr->i + 0.5) return -1;
                                  vlr->u = 0x80000000;
                                  if (value.d < vlr->i - 0.5) return -1;
                                  vlr->i = value.d;
                                  goto done;
                  case VT_U64:    vlr->u64 = 0;
                                  if (value.d < vlr->u64 - 0.5) return -1;
                                  vlr->i64--;
		                  if (value.d > vlr->u64 + 0.5) return -1;
                                  vlr->u64 = value.d;
                                  goto done;
                  case VT_I64:    vlr->i64  = ~0 >> 1;
                                  if (value.d > vlr->i64 + 0.5) return -1;
                                  vlr->i64 ^= 0;
                                  if (value.d < vlr->i64 - 0.5) return -1;
                                  vlr->i64 = value.d;
                                  goto done;
                  default:;
                  }
                  break;
  case VT_LUINT:  switch (bxr->typ) {
                  case VT_SIZE:   SET_TD(VT_LUINT,value.lgc.w,0); goto done;
                  case VT_SCALAR:
                  case VT_VOID:
                  case VT_LUINT:  goto same;
                  case VT_INT:    if (value.lgc.i < 0) {
                                    vlr->i = value.lgc.i;
                                    goto fitted;
		                  }
                                  goto ok;
                  case VT_UINT:   vlr->u   = value.lgc.i; goto done;
                  case VT_U64:
                  case VT_I64:    vlr->u64 = value.lgc.i; goto done;
                  default:;
                  }
                  break;
  case VT_BOOL:   width = 1;
  case VT_UINT:   switch (bxr->typ) {
                  case VT_SIZE:   SET_TD(VT_UINT,width,0); ; goto done;
                  case VT_SCALAR:
                  case VT_VOID:
                  case VT_UINT:   goto same;
                  case VT_INT:    if (value.i < 0) goto fits;
                                  goto ok;
                  case VT_U64:
                  case VT_I64:    vlr->u64 = value.u; goto done;
                  default:;
                  }
                  break;
  case VT_BIT:    width = 1;
  case VT_INT:    switch (bxr->typ) {
                  case VT_SIZE:   SET_TD(VT_INT,width,0); ; goto done;
                  case VT_SCALAR:
                  case VT_VOID:
                  case VT_INT:    goto same;
                  case VT_UINT:   if (value.i < 0) goto fits;
                                  goto ok;
                  case VT_U64:    if (value.i < 0) {
                                    int64_t ll = value.i;
                                    value.i64  = ll;
                                    return -1;
                                  }
                  case VT_I64:    vlr->i64 = value.i; goto done;
                  default:;
                  }
                  break;
  default:;
  }
  return 0;

same:
  *bxr = *bx();
  bxr->xtra = VTX_NONE;
ok:
  *vlr = *val();
done:
  return 1;

fits:
  *vlr = *val();
fitted:
  return -1;
}

int Expr::makeCall(Inst *ip,plExpr *xpr,int n,Expr *args)
{
  int do_it = -1,
      argc  = -1;
  eBX ret_bx;

# define DO_MATH 0

  switch(typ) {
  default:      switch (ref().pool) {
                case MATH_POOL: do_it = DO_MATH;
                                switch(ref().index) {
#                               define MATH_FUNC(i,bx,a,v,c,s)\
                                case i: argc = a; ret_bx = bx; goto chk_args;
#                               include "math_func.inc"
                                }
                                break;
                }
  }
  assert(NIY("Routine Call"));

chk_args:
  assert(n >= argc);
  set(ret_bx);
  switch(do_it) {
  case DO_MATH: switch(ref().index) {
#               define MATH_FUNC(i,bx,a,v,c,s)\
                case i: value.v = c; break;
#               include "math_func.inc"
                }
                break;
  }

  return 1;
}
