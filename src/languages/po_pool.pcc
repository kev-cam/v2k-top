/* Copyright (c) 1998-2007 Kevin Cameron */
/* Distributed under the GNU Lesser General Public License */
/* RCS ID: */ extern "C" const char * po_pool_pcc_rcsid() {return "$Id: po_pool.pcc,v 1.58 2009/07/08 08:42:58 dkc Exp $";}

#define CLASS_FILE PO_POOL
#define VERILOG3
#define VERILOG4

#define NON_EXPR_LOC(p) (p).ptr

#include "system.h"
#include "error.h"
#include "assertions.h"
#include "poolmngr.h"
#include "v2k_mem.h"
#include "v2k.h"
#define NEED_VERILOG
#include "tokpool.h"
#include "verilog.h"
#include "po_pool.h"
#include "arith.h"
#include "simulation.h"
#include "sim_kern.h"

#define THIS_EXPR TemplateExpr

class TemplatePoPool:public TemplateXpPool {
#undef  POOL_CLASS
#define POOL_CLASS   Po
#undef  THIS_CLASS
#define THIS_CLASS   TemplatePoPool
// THIS_CLASS = TemplatePoPool
#undef  PARENT_CLASS
#define PARENT_CLASS TemplateXpPool
// PARENT_CLASS = TemplateXpPool
public:
#include "TemplatePoPool.fld"
#define INHERIT_MINIMIZE
#define POOL_VIRTUAL
#include "TemplatePool.vfn"
#include "TemplatePoPool.vfn"
#include "ref.h"
#include "ixderef.inc"
#include "veri_pool-rop.cpp"

  // PRIVATE

  inline TemplatePoPool *me() const {
    return (TemplatePoPool *) TemplatePool::me();
  };
  inline TemplatePoPool *mi() const {
    return (TemplatePoPool *)PoolMngr->pool(mngr_indx);
  };
  inline TemplatePoPool *po_pool(int id)
  {
    return (TemplatePoPool *)(PoolMngr->pool(id));
  };

#ifdef THIS_EXPR

  void PortMismatch(Inst *,Inst *,int,int,PortInfo *);

  inline int evalExprBx(Inst *ip,plExpr *xpr,eBX bx,Value *ret) {
    THIS_EXPR ix(bx);
    int i = evalExpr(ip,xpr,ix.pl());
    if (i) *ret = *ix.val();
    return i;
  }

  int evalRange(Inst *,plExpr *,Value *);

  inline RngVec *setPortInfo(RngVec *rvp,unsigned int *max_rv,
                             int index,int incr,PortInfo *ret) {
    if (incr) {
      ret->index   = index + incr;
      ret->offset += ret->width;
      ret->width   = 1;
      ret->used    = 0;
      while (rvp) {
        if (rvp->port >= ret->index) {
          if (rvp->port == ret->index) {
            ret->width = portWidth(rvp);
          }
          break;
        }
        while (rvp->port < ret->index) {
          if (--*max_rv <= 0) return 0;
          else                rvp++;
        }
      }
    }
    return rvp;
  }

  inline PrtBnd *fixBindTbl(Inst *parent,Inst *child,PrtBnd *pbnd,
   		            U32 *width,PortInfo *trg_prt,
                            PrtBnd *assoc,int top,int mult)
  {
    PrtBnd *pt;
    int     tw,
            w = *width;

    tw = child->Self()->PortWidth(child,trg_prt,w);

    if (tw != w) {

      if (!top || mult) {
        if (tw > w) goto done;
      }

      switch (assoc->typ) {
      case BND_CONSTX:
      case BND_CONST0:
      case BND_CONST1:
      case BND_CONSTZ:
      case BND_EXPR:
        parent->lcl_wires += (tw - w);
        break;
      case BND_UNK:
        if ((w = parent->bindUnk(child,assoc,trg_prt)) == tw) {
  	  *width = tw;
  	  break;
        }
      default:
        PortMismatch(parent,child,w,tw,trg_prt);
        if (tw < w) *width = tw;
      }
    }
  done:
    return child->bind.tbl;
  }

#endif

  typedef struct BpsData_s {
    U32  max_rv;
    char named,
         todo;
    int  used;
  } BpsData;

  PrtBnd *bindPortsSub(Module *,Inst *,Inst *,plExpr *,PortInfo *,
                       BpsData *,RngVec *,PrtBnd *,int,plExpr *,plExpr *,poolRef *,
		       int);

  // PUBLIC

  eCG codegenTask   (int,plPrtdObj *,cgData *,int);
  eCG codegenFunc   (int,plPrtdObj *,cgData *,int);
  eCG codegenPorts  (int,plPort    *,cgData *);
  eCG codegenStmts  (int,plStmtAny *,cgData *);
  eCG codegenUsage  (int,plUsage   *,cgData *);
  eCG codegenStmt   (plStmtAny     *,cgData *);
  eCG codegenLSPrfx (plExpr        *,cgData *,int lvl = 0);
  eCG codegenExpr   (plExpr        *,cgData *,int *pfti = 0);
  eCG codegenExprCat(plExpr        *,cgData *,const char *);

  eCG codegenCall   (eCG,int,plPrtdObj *,plExpr *,cgData *);
  eCG codegenSysCall(eCG,poolRef *,plExpr *args,cgData *dp);

  bool exprBits     (plExpr *,plExpr *,cgData *);

  const char *TypeOf(plExpr *,cgData *,char *);
  const char *varTypeOf(plExpr *,cgData *,String *,const char *);
};

TemplatePoPool:: TemplatePoPool()    {}
TemplatePoPool:: TemplatePoPool(int) {}
TemplatePoPool::~TemplatePoPool()    {}

sFieldDesc *TemplatePoPool::description(){
  static sFieldDesc Description[] = {
#include "TemplatePoPool-dsc.h"
  };

  return Description;
}

#include "../common/describe.icc"

void TemplatePoPool::plSaveAtrObj(XREF(plAttrObj) arf,AttrObj *mao)
{
  Attr    *attrl = mao->attr_list;
  int      count = 0;
  poolRef  ref;

  while(attrl) {
    count++;
    attrl = attrl->next;
  }

  allocAligned(count * sizeof(MAX_PLATTR_OBJ),8,&ref,ALC_PERM);
  XREF(plRngdAttr) pa;
  IREF2MODE(ref,&pa);

  plAttrObj *pao = P(arf);
  pao->name      = mao->name;
  pao->typ       = mao->typ;

  if (pao->attrs = count) {
    pao->attr = I(pa);
    for (attrl = mao->attr_list; attrl ; attrl = attrl->next, INCR_REF(pa)) {
      plSaveAttr(*(XREF(plAttr) *)&pa,attrl);
    }
  }
}

void TemplatePoPool::plSaveAttr(XREF(plAttr) arf,Attr *sattr)
{
  AttrType        at   = sattr->at();
  int             rngd = 0;
  AttrAnyU2      *au   = (AttrAnyU2 *)sattr;
  RngdAttr       *pr   = (RngdAttr *)sattr;
  AttrAny        *pa   = (AttrAny *)sattr;
  MAX_PLATTR_OBJ *pla  = (MAX_PLATTR_OBJ *)P(arf);
  Expr           *xpr;
  poolRef         ref;
  XREF(plExpr)    px;

  if (at & ATTR_USR) {
    int sz = (rngd = (at & ATTR_RNGD)) ? sizeof(plRngdAttr)
                                       : sizeof(plAttrAnyU);
    switch (at  = ATTR_AT(at)) {
      case ATTR_LOGIC:
      case ATTR_ULOGIC: sz = sizeof(plAttrAnyU2); break;
      default:;
    }
    BCOPY(sattr->plAttr_Data(),pla,sz);
    xpr = au->value.expr;
  } else { /* decompress */
    BCOPY(sattr->plAttr_Data(),pla,sizeof(Attr));
    BCOPY(&pa->value,&pla->value,sizeof(Value));
    pla->nm.pool  = pa->pool;
    pla->nm.index = pa->index;
    pla->typ      = ATTR_TYPE(at|ATTR_USR);
    xpr           = pa->value.expr;
  }

  switch (at) {
  case ATTR_LOGIC:
  case ATTR_ULOGIC: px = plSaveExpr(au->value2.expr);
                    ((plAttrAnyU2 *)pla)->value2.xpr = I(px);
                    /* drop thru */
  case ATTR_EXPR:   px             = plSaveExpr(xpr);
                    pla            = (MAX_PLATTR_OBJ *)P(arf);
                    pla->value.xpr = I(px);
                    break;
  }

  if (rngd) {
    Range *ra  = pr->rng_lst;
    for (rngd = 0; ra ; ra = ra->next) rngd++;

    allocAligned(rngd * sizeof(plRange),8,&ref,ALC_PERM);
    XREF(plRange) rrg;
    IREF2MODE(ref,&rrg);

    plRngdAttr *plr = (plRngdAttr *)P(arf);
    plr->rngs       = rngd;
    plr->rng        = I(rrg);

    for (ra = pr->rng_lst; rngd-- > 0 ; ra = ra->next, INCR_REF(rrg)) {
      px            = plSaveExpr(ra->range);
      plRange *rng  = P(rrg);
      rng->range    = I(px);
      rng->exclude  = ra->exclude;
      rng->inc_strt = ra->inc_strt;
      rng->inc_fnsh = ra->inc_fnsh;
    }
  }
}

void TemplatePoPool::plSavePort(XREF(plPort) plp,Port *p)
{
  int           n    = p->pckd + p->unpckd,
                c;
  poolRef       ref  = NullRef;
  plExprIref   *rngs;
  XREF(plExpr)  dly  = plSaveExpr(p->dly),
                rng[n];

  if (c = n) {
    while (c-- > 0) {
      rng[c] = plSaveExpr(p->rng[c]);
    }
    me()->indxd_prts++;
    rngs = (plExprIref *)allocAligned(n * sizeof(ref),8,&ref,ALC_PERM);
    while (n-- > 0) {
      rngs[n] = I(rng[n]);
    }
  }

  plSaveAtrObj(*(XREF(plAttrObj) *)&plp,p);

  plPort *pp = P(plp);
  pp->io     = p->io;
  pp->ptyp   = p->ptyp;
  pp->styp   = p->styp;
  pp->chrg   = p->chrg;
  pp->ds0    = p->ds0;
  pp->ds1    = p->ds1;
  pp->value  = p->value;
  pp->pckd   = p->pckd;
  pp->unpckd = p->unpckd;
  pp->dly    = I(dly);
  pp->disc   = p->dsc_indx >= 0 ? p->disc_map(p->dsc_indx)->name.ref()
                                : NullRef;
  IREF2MODE(ref,&pp->rng);
}

XREF(plStmtAny) TemplatePoPool::makeStmts(long n)
{
  XREF(plStmtAny)  pls;
  poolRef          ref = NullRef;
  plStmtAny       *stt;

  if (n) {
    stt = (plStmtAny *)allocAligned(n * sizeof(plStmtAny),8,&ref,ALC_PERM);
  }

  IREF2MODE(ref,&pls);
  return pls;
}

XREF(plUsage) TemplatePoPool::makeUsage(long *pn,Usage *pu)
{
  XREF(plUsage) plu;
  poolRef       ref = NullRef;
  long          n   = *pn,
                i;

  if (n) {
    plUsage *us = (plUsage *)allocAligned(n * sizeof(plUsage),
                                          8,&ref,ALC_PERM);
    IREF2MODE(ref,&plu);
    for(i = 0; n-- > 0 ; i++,pu = pu->next) {
      if (pu->ignr) {
        (*pn)--;
        us              = P(plu);
        BZEROS(us[i]);
      } else {
        XREF(plExpr) px = plSaveExpr(pu->xpr);
        us              = P(plu);
        us[i].xpr       = I(px);
        us[i].use       = pu->use;
      }
    }
  }
  IREF2MODE(ref,&plu);
  return plu;
}

long TemplatePoPool::plSaveStmt(XREF(plStmtAny) srf,Stmt *stmt0)
{
  assert("Shouldn't get called" == 0);
  return 0;
}

void TemplatePoPool::plSaveStmtInit(XREF(plStmtInit) ri,StmtInit *stmt0)
{
  XREF(plStmtAny) rs  = makeStmts(A_STMT(stmt0->child));
  long            n   = stmt0->usage()->count();
  XREF(plUsage)   us  = makeUsage(&n,stmt0->usage()->first());

  plStmtInit   *pls   = P(ri);
  pls->name           = stmt0->name;
  pls->child          = I(rs);
  pls->usages         = n;
  pls->usage          = I(us);
  plSaveStmt(rs,stmt0->child);
}

PortDir TemplatePoPool::portMode(plPort *prt,int idx)
{
  if (!prt) {
    if (idx >= ports) {
      return PRT_XPRTD;
    }
    prt  = P(port);
    prt += idx;
  }

  return (PortDir)prt->io;
}

PortTyp TemplatePoPool::portType(plPort *prt,int idx)
{
  if (!prt) {
    if (idx >= ports) {
      return PT_NONE;
    }
    prt  = P(port);
    prt += idx;
  }

  int pt = prt->ptyp;

  if (prt->pckd) pt |= PT_PACKED;

  return (PortTyp)pt;
}

poolRef TemplatePoPool::parmVal(Inst *ip,int idx,BaseExpr *pb,Value *pv)
{
  MAX_PLATTR_OBJ *pu = P(parm);
  THIS_EXPR       tx,
                  ret;

  tx.typ           = VT_REFL;
  tx.rtyp          = REF_PARM;
  tx.prrf()->index = idx;

  ret.set(BX_SCALAR);

  int c = evalExpr(ip,(plExpr *)&tx,(plExpr *)&ret);

  *pv = *ret.pval();
  *pb = *ret.bx();

  ret.set(BX_VOID);

  pu += idx;
  return pu->nm;
}

bool TemplatePoPool::parmRange(Inst *ip,int pidx,int ridx,parmRng *rng_data)
{
  MAX_PLATTR_OBJ *pu = P(parm);

  pu += pidx;

  if (pidx < parms && ridx < pu->rngs) {
    int c;
    plRange *pr = P(pu->rng);
    rng_data->exclude  = pr->exclude;
    rng_data->inc_strt = pr->inc_strt;
    rng_data->inc_fnsh = pr->inc_fnsh;
    THIS_EXPR ret;
    ret.set(BX_SCALAR);
    plExpr *rx = (plExpr *)P(pr->range);
    if (pr->exclude) {
      c = evalExpr(ip,rx,(plExpr *)&ret);
      rng_data->start_b  = *ret.bx();
      rng_data->start_v  = *ret.pval();
    } else {
      c = evalExpr(ip,(plExpr *)P(rx->left),(plExpr *)&ret);
      rng_data->start_b  = *ret.bx();
      rng_data->start_v  = *ret.pval();
      ret.set(BX_SCALAR);
      c = evalExpr(ip,(plExpr *)P(rx->right),(plExpr *)&ret);
      rng_data->finish_b = *ret.bx();
      rng_data->finish_v = *ret.pval();
    }
    ret.set(BX_VOID);
    return true;
  }

  return false;
}

Inst *TemplatePoPool::locateRef(Inst *ip,int i,poolRef rpath,
                                XmrData *ret,eXMR xio) // set ret typ
{
  Inst    *ip0 = ip,
          *rip;

  if (!(rip = ip->haveXmr(i,ret))) {

    const char *pth = strDeref(rpath),
               *cp  = pth,
               *dt;
    poolRef     scp;
    int         n;

    for (n=0; *cp ; cp++) if ('.' == *cp) n++;

    { TMPARR(poolRef,nm,n+1);
      for (n = 0,cp = pth; dt = strchr(cp,'.') ; cp = dt +1) {
        nm[n++] = strFindSeg(cp,dt-cp);
      }
      nm[n++] = strFind(cp);
      while (ip0) {
        if (rip = ip0->findXmr(n,nm,ret,xio)) {
          ip->logXmr(i,rip,ret);
          goto done;
        }
	ret->scp++;
        ip0 = ip0->parent;
      }
      rip = 0;
    }
  }

done:
  return rip;
}

plPort *TemplatePoPool::getPort(int pidx)
{
  plPort *prt = P(port);

  return &prt[pidx];
}

int TemplatePoPool::evalIndices(Inst *ip,int c,RngVec *rvp)
{
  int          p      = ports,
               i      = 0,
               io     = 1,
               xpl    = mngr_indx,
               rt_md  = (ip->parent == ip->Root);
  plPort      *prt    = P(port);
  plExpr       arr[16];
  THIS_EXPR   *bx;
  poolRefIref *rngs;

  ip->glbl_strt = ip->lstWire();

  for (; i < p ; i++,prt++) {

    Inst      *ipx = ip;
    int        pio   = portMode(prt,i),
               wires = 1,
               r;

    TemplatePoPool *xp = this;

    rngs  = (poolRefIref *)Px(prt->rng);

    if (prt->io & PRT_HIER) {
      XmrData xmr;
      xmr.typ.need = RFF_HIER;
      xmr.scp      = 0;
      ipx          = locateRef(ip,i,prt->name,&xmr,
                              XMR(XMR_DATA|((pio >> PRT_XMR_SHFT) & XMR_XIO)));

      if (ipx) {
        int      ior;
        XmrData  imr;
        plPort  *rprt;
        switch (xmr.typ.got) {
        case REF_UNKNOWN:
        case REF_PORT:
                       ior = ipx->portMode(rprt = ipx->getPort(xmr.index,&xpl),
                                           xmr.index);
                       ip->setImrFlags(i,XMR_LCLSIG);
                       ipx->addImrFlags(xmr.index,XMR_RMTSIG);
                       imr.typ.got = REF_PORT;
                       imr.scp     = -1;
                       imr.index   = i;
                       ipx->logXmr(xmr.index,ip,&imr);
                       assert(!rngs);
                       prt->pckd   = rprt->pckd;
                       prt->unpckd = rprt->unpckd;
                       if (prt->pckd || prt->unpckd) {
                         prt->rng = rprt->rng;
#if REF_IS_PTR == 0
                         prt->rng.pi.pool = xpl;
#endif
                         rvp      = ip->extraRv(1);
                         c++;
                         xp       = po_pool(xpl);
                         rngs     = (poolRefIref *)Px(prt->rng);
                       }
                       break;

        case REF_PARM: continue;

        default:       assert(("XMR Type?",0));
        }
      } else {
        String buff;
        ErrorMsg(S_ERROR(STS_ELAB),"Failed to find %s from %s",
		                   strDeref(prt->name),ip->path(&buff));
      }
    } else {
      if (prt->unpckd && PT_ALIAS == prt->ptyp) {
        assert(("NIY - aliased ports",0));
      }
    }

    int a = -1;
    for (r = 0; r < prt->pckd + prt->unpckd; r++) {
      poolRefIref rx = rngs[r];
#if REF_IS_PTR == 0
      rx.pi.pool = xpl;
#endif
      THIS_EXPR *rng = (THIS_EXPR *)Px(rx);
      assert(c >= 0);
      rvp->port = i;
      rvp->dirn = 0;
      if (rng) {
        if (VT_ALIAS == rng->vt()) {
          rng = (THIS_EXPR *)Px(rng->pval()->xpr);
	}
        if (VT_OPERATOR == rng->vt() && OPR_RANGE == rng->val()->op) {
          ((BaseExpr *)(&arr[++a]))->set(BX_INTEGER);
          xp->evalExpr(ipx,rng->pl_lhs(xp),&arr[a]);
          ((BaseExpr *)(&arr[++a]))->set(BX_INTEGER);
          xp->evalExpr(ipx,rng->pl_rhs(xp),&arr[a]);
          int dirn = arr[a].value.i > arr[a-1].value.i ?  1
                                                       : -1;
          wires   *= 1 + (dirn * (arr[a].value.i - arr[a-1].value.i));
          if (dirn > 0) rvp->dirn |= 1 << r;
        } else {
          assert(r >= prt->pckd);
          ((BaseExpr *)(&arr[++a]))->set(BX_INTEGER);
          xp->evalExpr(ipx,(plExpr*)rng,&arr[a]);
          ASSERT(arr[a].value.i >= 1);
          wires           *= arr[a].value.i;
          arr[++a].value.i = 1;
          rvp->dirn       |= 1 << r;
        }
      }
    }

    if (a >= 0) {
      ASSERT(!rvp->count && !rvp->values && c > 0);

      rvp->count  = prt->pckd + prt->unpckd;
      rvp->values = MALLOC2_N(a+1,Value);

      for (; a >= 0 ; a--) rvp->values[a] = *(Value *)&arr[a].value;

      rvp++; c--;
    }

    int algn = sizeof(void *);

         if ((prt->ptyp & PT_INT) && !prt->pckd) { wires *= 32; algn = 4; }
    else if (prt->ptyp & PT_REAL)                { wires *= 64; algn = 8; }

    if (ip->sim_space % algn) {
      ip->sim_space += algn;
    }

    int ss = ip->simSpace(3,wires) + sizeof(v2kSimItem);

    if (ss < 4) ss = 4;

    if (pio & PRT_PORT) {
      assert(("Ports in order",io));
      ip->prt_wires += wires;
      ip->sim_space += ss; 
      if (rt_md) {
        ip->glbl_strt += wires;
      }
    } else {
      io = 0;
      if (prt->io & PRT_HIER) {
        // not local
      } else if (pio & PRT_BNDSIG) {
        ip->lcl_wires += wires;
        ip->sim_space += ss; 
      } else if (XMR_BNDSIG & ip->Imr(i)) {
        ip->lcl_wires += wires;
        ip->sim_space += ss; 
      } else {
        if (prt->ptyp & (PT_INT|PT_REG)) {
          ip->sim_space += ss; 
        }
      }
    }
  }

  return c;
}

MAX_PLATTR_OBJ *TemplatePoPool::parm_list(int *count)
{
  if (*count = parms) {
    return P(parm);
  }

  return 0;
}

int TemplatePoPool::getPortInfo(Inst *ip,poolRef nm,PortInfo *ret,int prt_allow)
{
  RngVec *rvp  = ip->rv;
  int     i    = 0,
          skpd = 0,
          c    = indxd_prts,
          pw;
  plPort *prt  = P(port);
  long    w    = 0;

  for (; i < ports ; prt++,i++,w += pw) {

    pw = 1;

         if ((prt->ptyp & PT_INT) && !prt->pckd) pw = 32;
    else if ((prt->ptyp & PT_REAL))              pw = 64;

    PortDir pd = ip->portMode(prt,i);

    if ((pd & prt_allow) || PRT_ANY == prt_allow) {
      while (c > 0 && rvp->port < i) {rvp++;c--;}
      if (c > 0 && rvp->port == i) {
        pw *= portWidth(rvp,ret->dimn);
      }

      if ((NULL_REF(nm) && ret->index == i) || SAME_REF(prt->name,nm)) {
        ret->pckd   = prt->pckd;
        ret->unpckd = prt->unpckd;
        ret->xmr    = 0 != (prt->io & PRT_HIER);
        ret->index  = i;
        ret->width  = pw;
        ret->offset = w;
        return i;
      }
    }

    if (!(pd & prt_allow)) {
      skpd += pw;
      pw    = 0;
    }
  }

  return -1;
}

poolRef TemplatePoPool::itemName(eREF typ,int i)
{
  assert("Shouldn't get called" == 0);
  return NullRef;
}

plStmtAny *TemplatePoPool::getStmt(int index)
{
  plStmtAny *pstmt = P(stmt);

  assert(index < stmts);

  return &pstmt[index];
}

poolRef TemplatePoPool::stmtLabel(int i)
{
  plStmtAny *pstmt = getStmt(i);
  poolRef    ref   = NullRef;

  switch (pstmt->Header.typ) {
#define PROC_STMT_ONLY
#define STATEMENT(e,t,m) case e: ref = ((pl##t *)(pstmt))->name; break;
#include "statement.inc"
  }

  return ref;
}

int TemplatePoPool::getPortDisc(int pidx)
{
  plPort *pp = P(port);

  return getDisc(pp->disc);
}

int TemplatePoPool::getSigInfo(eUSG use,plExpr *xpr0,Inst *ip,int pid,
                               eREF rft,int pidx,int prts,int si)
{
  IREF(plExpr) item,
               slct;
  DrvInfo      dri;
  plExpr      *xpr = xpr0;

  dri.ver = VPD_VERPROC_DF;
loop:
  switch (xpr->typ) {
  case VT_ALIAS:        xpr  = P(xpr->value.xpr);
	                goto loop;
  case VT_OPERATOR:
    switch (xpr->value.op) {
    case OPR_LIST1:     assert(use & USG_TO_GRND);
                        use     = USG(use & ~USG_TO_GRND);
                        item    = *(IREF(plExpr) *)&xpr->right;
                        slct    = *(IREF(plExpr) *)&xpr->left;
                        getSigInfo(use,P(slct),ip,pid,rft,pidx,prts,si);
                        xpr     = P(item);
                        goto loop;
    case OPR_FLOW:      use     = USG(use|USG_FLOW);
    case OPR_POTENTIAL: use     = USG(use|USG_TO_GRND);
                        item    = *(IREF(plExpr) *)&xpr->right;
                        xpr     = P(item);
                        goto loop;
    case OPR_INDEX:     slct    = *(IREF(plExpr) *)&xpr->right;
	                item    = *(IREF(plExpr) *)&xpr->left;
                        xpr     = P(item);
                        dri.ver = VPD_VERPROC_PS;
                        break;
    default:            assert(0);
    }
  default:              BZEROS(slct);
  }

  switch (rft == xpr->rtyp) {
  case REF_PORT: if (pidx == xpr->value.rrf.index) {
                   int rcv = (0 != (use & USG_SENSE)),
		       drv = (0 != (use & USG_DRIVEN));
                   plPort *prt = 0;
                   if (rcv || drv) {
                     void *si_extra;
                     prt  = P(port);
                     prt += pidx;
                     if ((si_extra = NO_EXTRA,    prt->io  & PRT_BNDSIG) ||
                         (si_extra = SI_REGISTER, prt->typ & PT_REG)) {
                       SIcllctr->setSigInfo(ip,pid,si,dri,0,rcv,drv,si_extra);
                     }
                   }
                   rcv = (0 != (use & (USG_A_READ|USG_PROBE))),
		   drv = (0 != (use & USG_CONTRIB));
                   if (rcv || drv) {
                     if (!prt) {
                       prt  = P(port);
                       prt += pidx;
                     }
                     if (prt->io & PRT_BRANCH) {
                       dri.ver = VPD(dri.ver << VPD_ANALOG);
                       SIcllctr->setSigInfo(ip,pid,si,dri,0,rcv,drv,
                                            (void *)(getDisc(prt->disc)));
                     }
                   }
                 }
                 break;
  }
  return 0;
}

void TemplatePoPool::getSigInfo(Inst *ip,eREF rft,int pidx,int prts,int si)
{
  IREF(plUsage) ru;
  int           s = stmts,
                u;

  while (s-- > 0) {
    plStmtAny *pstmt = getStmt(s);

    switch (pstmt->Header.typ) {
      default: continue;
#define PROC_STMT_ONLY
#define STATEMENT(e,t,m) case e: u  = ((pl##t *)(pstmt))->usages;\
                                 ru = ((pl##t *)(pstmt))->usage; break;
#include "statement.inc"
    }
    int i = u;
    for (; i-- > 0 ; INCR_REF(ru)) {
      plUsage *pu   = P(ru);
      eUSG     usg  = (eUSG)pu->use;
      getSigInfo(usg,P(pu->xpr),ip,s,rft,pidx,prts,si);
    }
  }
}

int TemplatePoPool::evalRange(Inst *ip,plExpr *xpr0,Value *ret)
{
  THIS_EXPR  ix(BX_INTEGER),
            *rx = (THIS_EXPR *)xpr0;
  int        i  = 0;

  if (evalExpr(ip,rx->pl_lhs(this),ix.pl())) ret[i++] = *ix.val();
  if (evalExpr(ip,rx->pl_rhs(this),ix.pl())) ret[i++] = *ix.val();

  return i;
}

void TemplatePoPool::PortMismatch(Inst *parent,Inst *child,int w,int tw,PortInfo *trg_prt)
{
  String      buff,
              sport;
  poolRef     ref;
  const char *ps;

  ref = child->itemName(REF_PORT,trg_prt->index);
  if (NULL_REF(ref)) {
    ps = sport.printf("#%d",trg_prt->index)->str();
  } else {
    ps = strDeref(child->itemName(REF_PORT,trg_prt->index));
  }
  eSTS sts = S_WARNING(STS_ELAB);
  if (((tw < w) && (V2kPortMode & PORT_NOEXCESS)) ||
      ((tw > w) && (V2kPortMode & PORT_NODANGLE)))
  {
    sts = S_ERROR(STS_ELAB);
  }
  ErrorMsg(sts,"Port width mismatch (%d => %d) %s:%s",
               w,tw,child->path(&buff),ps);
  parent->reportPosn(child);
}

bool TemplatePoPool::bindPorts(Module *mod,Inst *parent,Inst *child)
{
  bool    ok      = 1;
  poolRef lst_nmd = NullRef;

  IREF(plExpr) bx;

  if ((bx.pi.index = child->bind.xpr) > 0)
  {
    bx.pi.pool = mngr_indx;

    RngVec    *rvp_c    = child->rv;
    plExpr    *xpr      = P(bx);
    PortInfo   trg_prt;
    THIS_EXPR  NC(BX_NC,-1);
    BpsData    sub_data;

    sub_data.max_rv = 0;
    sub_data.named  = 0;
    sub_data.todo   = 0;
    sub_data.used   = 0;

    trg_prt.index   = -1;
    trg_prt.offset  =  0;
    trg_prt.width   =  0;
    trg_prt.used    =  0;
    trg_prt.dimn    =  0;

    if (rvp_c) {
      Module *mod_c   = child->pmod();
      sub_data.max_rv = mod_c->indxd();
    }

    bx.pi.pool       = mngr_indx;
    child->bind.tbl  = 0;

    bindPortsSub(mod,parent,child,
                 xpr,&trg_prt,
                 &sub_data,rvp_c,
                 child->makeBindTbl(-1),1,0,
                 NC.pl(),&lst_nmd,0);

    if (sub_data.used != child->prt_wires) {
      if (V2kPortMode & (PORT_NOUNCONN|PORT_WRNUNCNN)) {
        String buff;
        ErrorMsg((V2kPortMode & PORT_NOUNCONN) ? S_ERROR(STS_ELAB)
                                               : S_WARNING(STS_ELAB),
                 "Unconnected Ports on %s",child->path(&buff));
        ok = 0;
      }
      child->fillNC(sub_data.named ? 0
		                   : sub_data.used,sub_data.used);
    }
  } else {
    child->noBindTbl();
  }

  return ok;
}

PrtBnd *TemplatePoPool::bindPortsSub(Module *mod,Inst *parent,Inst *child,
                                     plExpr *xpr0,PortInfo *trg_prt,
                                     BpsData *pBps,RngVec *rvp_c,
                                     PrtBnd *pbnd,int top,plExpr *mult,
                                     plExpr *pNC,poolRef *lst_nmd,int depth)
{
  plExpr  *xpr2,
          *xpr_next,
          *xpr;
  RngVec  *rvp;
  U32     width;
  PortInfo top_prt;
  int      c,
           offset,
           dirn;
  PrtBnd   pb;
  poolRef  nm;
  Value    idata[4];
  int      multiply = 1;

  if (mult) {
    if (evalExprBx(parent,mult,BX_INTEGER,idata)) {
      multiply = idata[0].i;
    } else {
      goto done;
    }
  }

# define CHECK_PORT  if (top && trg_prt->index >= 0 &&\
                                trg_prt->width > trg_prt->used) {\
                       PortMismatch(parent,child,trg_prt->used,\
                                                 trg_prt->width,trg_prt);}

# define NEXT_PORT   if (pBps->todo) { pBps->todo = 0; }\
                     else {\
                       if (0 == depth && pBps->named) {\
                         parent->warnMixed(child,*lst_nmd); }\
                       CHECK_PORT;\
                       rvp_c = setPortInfo(rvp_c,&pBps->max_rv,trg_prt->index,\
                                           top,trg_prt);}

# define BND_CHECK(x) if (!(offset < child->prt_wires &&\
                           pbnd && BND_NC == pbnd[offset].typ)) {\
                        String buff;\
                        if (x && offset >= child->prt_wires) {\
                          ErrorMsg(S_WARNING(STS_ELAB),"Port Width Mismatch %s:%s",\
	  	   		   child->path(&buff),\
                                   strDeref(child->itemName(REF_PORT,trg_prt->index)));\
                          break;\
                        } else {\
                          ErrorMsg(S_ERROR(STS_ELAB),"Internal: Bad bind %s:%s O:%d,W:%d,P:%d",\
				   child->path(&buff),\
                                   strDeref(child->itemName(REF_PORT,trg_prt->index)),\
                                   offset,child->prt_wires,pbnd ? pbnd[offset].typ : -2);\
                          assert(0);}}

  while (multiply-- > 0) {

    xpr_next = xpr0;

    while (xpr = xpr_next) {
      int   depth = 0;
      eINDX indxd = INDX_NONE;

      xpr_next = 0;
      width    = 1;

    again:
      depth++;
      switch (xpr->typ) {
      case VT_OPERATOR:
        switch (xpr->value.op) {
        case OPR_LIST2:
          xpr_next = pNC;
          goto list;
        case OPR_LIST1:
          xpr_next = P_EXPR(xpr->right);
        list:
          xpr   = P_EXPR(xpr->left);
          depth = 0;
          if (!xpr) xpr = pNC;
          goto again;
        case OPR_INDEX:
          xpr2     = P_EXPR(xpr->right);
          xpr      = P_EXPR(xpr->left);
          indxd    = INDX_SIMPLE;
          switch (xpr2->typ) {
          case VT_UINT:
          case VT_INT: {
            if (evalExprBx(parent,xpr2,BX_INTEGER,idata)) goto again;
          } break;
          case VT_OPERATOR:
            switch (xpr2->value.op) {
	    case OPR_RANGE: if (2 == evalRange(parent,xpr2,idata)) {
                              indxd = INDX_RANGE;
                              goto again;
	                    }
                            continue;
            }
          }

          if (evalExprBx(parent,xpr2,BX_CONST,idata) &&
              evalExprBx(parent,xpr2,BX_INTEGER,idata)) {
            goto again;
          }

          { String buff;
            ErrorMsg(S_ERROR(STS_ELAB),"Non-constant index binding %s:%s",
                                       child->path(&buff),strDeref(nm));
            parent->reportPosn(child);
          }
          continue;
        case OPR_BIND:
          assert(top);
          pBps->named = 1;
          xpr2        = P_EXPR(xpr->left);
          xpr         = P_EXPR(xpr->right);
          switch (xpr2->typ) {
          default:      assert(("bindPorts/OPR_BIND",0));
          case VT_VOID: nm = *lst_nmd = xpr2->value.ref; break;
          }
          CHECK_PORT;
          if (child->getPortInfo(nm,trg_prt,PRT_BNDSIG) < 0) {
            String buff;
            ErrorMsg(S_ERROR(STS_ELAB),"No such port %s:%s",
                                       child->path(&buff),strDeref(nm));
            parent->reportPosn(child);
            continue;
          }
          pBps->todo    = 1;
          trg_prt->used = 0;
          depth         = 0;
          if (!xpr) xpr = pNC;
          goto again;
        case OPR_NCAT:
        case OPR_CAT:
          NEXT_PORT
          pbnd = bindPortsSub(mod,parent,child,
                              P_EXPR(xpr->right),trg_prt,
                              pBps,rvp_c,
                              pbnd,0,P_EXPR(xpr->left),pNC,lst_nmd,depth+1);
          continue;
        default:
          NEXT_PORT
          if (evalExprBx(parent,xpr,BX_SIZE,idata)) {
            width  = idata[0].td.size;
            if (width != trg_prt->width) {
              String buff;
              ErrorMsg(S_WARNING(STS_ELAB),"Port width mismatch (%d => %d) %s:%s",
	  	       width,trg_prt->width,
                       child->path(&buff),
                       strDeref(child->itemName(REF_PORT,trg_prt->index)));
              width  = trg_prt->width;
            }
          } else {
	    // assert(("Not Tested",0)); ??? - sort of worked
            width  = trg_prt->width;
          }
          { THIS_EXPR test(BX_CONST);
            if (evalExpr(parent,xpr,test.pl())) {
              switch(test.typ) {
              case VT_LOGIC:
              default:      parent->reportPosn(child);
                            assert(("Type ?",0));
              }
            } else {
              pb.typ = BND_EXPR;
            }
          }
          goto do_xpr;
        }
      case VT_NC:
        NEXT_PORT
        width      = trg_prt->width;
        pb.typ     = BND_SET_NC;
        pb.index   = child->addNC(width);
        pb.offset  = 0;
        pbnd       = fixBindTbl(parent,child,pbnd,&width,trg_prt,&pb,
                                top,multiply);
        offset     = trg_prt->offset + trg_prt->used;
        for (c = 0; c < width ; c++,offset++,pb.index++) {
          BND_CHECK(0)
          pbnd[offset] = pb;
        }
        trg_prt->used += width;
        pBps->used    += width;
        continue;
      case VT_LUINT:
        NEXT_PORT
        width      = xpr->value.lgc.w;
        idata[0].i = xpr->value.lgc.i;
        goto do_int;
      case VT_UINT:
      case VT_INT:
        NEXT_PORT
        width      = trg_prt->width;
        idata[0].i = xpr->value.u;
      do_int:
        assert(1 == depth);
        pb.typ             = BND_CONST0;
      do_xpr:
        pb.index           = index(xpr);
        pb.offset          = parent->lcl_wires;
        parent->lcl_wires += width;
        pbnd               = fixBindTbl(parent,child,pbnd,&width,trg_prt,&pb,
                                        top,multiply);
        offset             = trg_prt->offset + trg_prt->used;
        for (c = 0; c < width ; pb.offset++,c++,offset++) {
          BND_CHECK(1)
          pbnd[offset] = pb;
          if (BND_CONST0 == pb.typ && (((idata[0].i >> c)) & 1)) {
            pbnd[offset].typ = BND_CONST1;
	  }
        }
        trg_prt->used += width;
        pBps->used    += width;
        continue;
      case VT_REFL:
        top_prt.index  = xpr->value.rrf.index;
        pb.index       = top_prt.index;
        dirn           = 1;
        NEXT_PORT
        switch (xpr->rtyp) {

        case REF_UNKNOWN: pb.typ = BND_UNK;
	                  parent->bindUnk(child,&pb,trg_prt);
                          goto do_refl;
        case REF_PORT:    pb.typ = BND_PORT;
                          goto do_refl;

        do_refl: switch (indxd) {
                 case INDX_RANGE:  pb.offset = idata[0].i;
                                   width = c = idata[1].i - idata[0].i;
                                   if (c < 0) {
                                     dirn = -1; width = -c;
                                   }
                                   width++;
                                   break;
                 case INDX_SIMPLE: pb.offset = idata[0].i;
                                   width     = 1;
                                   break;
                 default:          pb.offset = 0;
                                   width     = 1;
                                   switch (pb.typ) {
                                   case BND_PORT:
                                     c         = parent->rv_count;
                                     rvp       = parent->rv;
                                     for (; c-- > 0 ; rvp++) {
                                       if (rvp->port >= top_prt.index) {
                                         if (rvp->port == top_prt.index) {
                                           width = portWidth(rvp);
                                         }
                                         break;
                                       }
                                     }
                                   }
                 }
		 int irng = child->rngInc(),
                     shft = 0;
                 if (irng) { 
                   int rmax = child->rngMax(),
		       ridx = child->rngSlv();
                   if (0 == width%rmax) { 
                     width     /= rmax;
                     shft       = width * ridx;
                     pb.offset += shft;
		   }
	         }
                 pbnd   = fixBindTbl(parent,child,pbnd,&width,trg_prt,&pb,
                                     top,multiply);
                 offset = trg_prt->offset + trg_prt->used;
                 for (c = 0; c < width ; c++,pb.offset += dirn,offset++) {
                   BND_CHECK(0)
                   pbnd[offset] = pb;
                 }
                 trg_prt->used += width;
                 pBps->used    += width;
                 continue;
        }
      default: assert(0);
      }
    }
  }

done:
  return pbnd;
}

void TemplatePoPool::plSaveStmtExpr(XREF(plStmtExpr) re,StmtExpr *estmt)
{
  XREF(plExpr)  px  = plSaveExpr(estmt->expr);
  plStmtExpr   *pls = P(re);
  pls->expr         = I(px);
}

