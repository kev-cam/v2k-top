/* Copyright (c) 1998-2007 Kevin Cameron */
/* Distributed under the GNU Lesser General Public License */
/* RCS ID: */ extern "C" const char * str_pool_pcc_rcsid() {return "$Id: str_pool.pcc,v 1.32 2007/03/28 07:24:00 dkc Exp $";}

#define CLASS_FILE STR_POOL

#include "system.h"
#include "error.h"
#include "assertions.h"
#include "template.h"
#include "ref-pp.h"
#include "str_pool.h"
#include "poolmngr.h"
#include "v2k_mem.h"
#include "v2k_misc.h"

#include "strdb.h"

//! <a href="../docs/html/str_pool.html">Template</a> String Pool
class TemplateStringPool:public TemplatePool {
#undef  POOL_CLASS
#define POOL_CLASS   String
#undef  THIS_CLASS
#define THIS_CLASS   TemplateStringPool
// THIS_CLASS = TemplateStringPool
#undef  PARENT_CLASS
#define PARENT_CLASS TemplatePool
// PARENT_CLASS = TemplatePool
public:
#include "TemplateStringPool.fld"
#define INHERIT_MINIMIZE
#define INHERIT_CLOSE
#include "TemplatePool.vfn"

  poolRef addString(const char *,int reg = 0);
  poolRef addString2(const char *);
  virtual poolRef findString(const char *);

  void Init();

};

TemplateStringPool:: TemplateStringPool()    {}
TemplateStringPool:: TemplateStringPool(int) {}
TemplateStringPool::~TemplateStringPool()    {}

int TemplateStringPool::dumpAscii(const char *asc_file)
{
  return STS_NIY;
}

ePM TemplateStringPool::changeMode(ePM to)
{
#include "convert.icc"
  return old;
}

sFieldDesc *TemplateStringPool::description()
{
  static sFieldDesc Description[] = {
#include "TemplateStringPool-dsc.h"
  };

  return Description;
}

#include "describe.icc"

poolRef TemplateStringPool::findString(const char *str)
{
  return strFind(str);
}

poolRef TemplateStringPool::addString(const char *str,int reg)
{
  PoolLock(mngr_indx);
  poolRef ref = strFind(str);
  if (ref.pool < 0) {
#include "addstring.icc"
    ref.pool = mngr_indx;
    if (reg) strRegister(s,ref,mngr_indx);
  }
  PoolUnlock(mngr_indx);
  return ref;
}

poolRef TemplateStringPool::addString2(const char *str)
{
  poolRef ref;
#include "addstring.icc"
  ref.pool = mngr_indx;
  return ref;
}

void TemplateStringPool::Init()
{
  if (self != this) {
    ((TemplateStringPool *)self)->Init();
  } else {
    int     end  = data_end;
    poolRef ref;

    ref.pool  = mngr_indx;
    ref.index = TOK_POOL_START;

    for (;;) {
      if (ref.index & 1) ref.index++;
      if (ref.index >= end) break;
      PoolStr *s = (PoolStr *)i_deref(ref);
      strRegister(s,ref,mngr_indx);
      ref.index += 3 + s->l;
    }
  }
}
