/* Copyright (c) 1998-2007 Kevin Cameron */
/* Distributed under the GNU Lesser General Public License */
/* RCS ID: */ extern "C" const char * template_pcc_rcsid() {return "$Id: template.pcc,v 1.65 2007/03/28 07:24:00 dkc Exp $";}

#define CLASS_FILE TEMPLATE

#include "system.h"
#include "error.h"
#include "assertions.h"
#include "pool.h"
#include "job.h"
#include "file.h"
#include "v2k_misc.h"
#include "poolmngr.h"
#include "template-pp.h"

//! <a href="../docs/html/Template.html">Template</a> Pool Type
class TemplatePool : public BasePool {
#undef  THIS_CLASS
#define THIS_CLASS TemplatePool
// THIS_CLASS = TemplatePool
#define BASE_POOL  THIS_CLASS
public:
#define MIN_HEADER (8 * 16)
#define PAD_HEADER (MIN_HEADER - sizeof(sPool))
#include "TemplatePool-rop.cpp"
#include "TemplatePool.fld"
#include "TemplatePool.vfn"
#include "ixderef.inc"
#undef  BASE_POOL
  TemplatePool *Init(const File *f,const char *,int,int);
  void          MrkExtndd(long,long);

  inline TemplatePool *me() const {
    TemplatePool *slf = (TemplatePool *)self;
    return (PM(PMF_Trash) == slf->pmode) ? slf->me()
                                         : slf;
  };
  inline TemplatePool *mi() const {
    return (TemplatePool *)PoolMngr->pool(mngr_indx);
  };

#if defined(POOL_MODE_DSK) || defined(POOL_MODE_VRT)
# define POOL_CACHED 1
#else
# define POOL_CACHED 0
#endif
  inline PMplData *ModeData()           {return PoolMngr->data(mngr_indx);};
  inline PMplData *setModeData(void *p) {return PoolMngr->setData(mngr_indx,
                                                              (PMplData *)p);};
#if POOL_CACHED
  inline CchData *Cache()    {return (CchData *)ModeData();};
  inline int      CacheTop() {CchData *pCache = Cache();
                              return   pCache ? pCache->top_block
                                              : -1;}
  void MapBlock(long,long,int);
  void SyncBlock(long);
  void UnmapBlock(long);
#else
# ifdef POOL_MODE_MPD
  inline MapData  *Mapping()  {return (MapData  *)ModeData();};
# endif
  inline FlagData *Flags()    {return (FlagData *)ModeData();};
  inline int       FlagsTop() {FlagData *pFlags = Flags();
                               return    pFlags ? pFlags->top_block
                                                : -1;}
#endif
#define LOCAL_REF(rp) (((voidIref *)rp)->pi.pool <= 0 ||\
                       ((voidIref *)rp)->pi.pool == mngr_indx)
  inline char *i_deref(voidIref *ref,int x_ok = 0) {
#if POOL_CACHED
    if (!ref->pi.pool) return 0;
    long     blk    = CCH_BLK(ref->pi.index),
             idx    = CCH_BLK_OFF(ref->pi.index);
    CchData *pCache = Cache();
    if (blk > pCache->top_block) {
      assert(0);
    }
    MapBlock(blk,blk,BI_READ);
    char *rp = Cache()->mapped[blk].data;
    return &rp[idx];
#endif
#if defined(POOL_MODE_INM) || defined(POOL_MODE_NLD)
# define REF_IS_PTR 1
#else
# define REF_IS_PTR 0
#endif
#if REF_IS_PTR
    return ref->cp;
#endif
    if (ref->pi.pool != 0) {
      if (this != self) {
        ASSERT(PM_Trash == pmode);
        self = PoolMngr->pool(mngr_indx);
      } 
      if (LOCAL_REF(ref)) {
        return  &((char *)self)[ref->pi.index];
      }
      ASSERT(x_ok);
      return (char *)PoolMngr->pool(ref->pi.pool)->deref(ref);
    }

    return 0;
  };
  inline void incr_ref(charIref *ref,int size) {
#if REF_IS_PTR
    ref->ptr      += size;
#else
    ref->pi.index += size;
#endif
  }
  inline char *i_deref(poolRef ref) {
#if POOL_CACHED
    long blk = CCH_BLK(ref.index),
         idx = CCH_BLK_OFF(ref.index);
    if (blk > Cache()->top_block) {
      assert(0);
    }
    MapBlock(blk,blk,BI_READ);
    char *rp = Cache()->mapped[blk].data;
    return &rp[idx];
#endif
    return &((char *)this)[ref.index];
  };
  inline char *x_deref(voidXref *ref) {
#if defined(POOL_MODE_NLD)
    return ref->cp;
#endif
#if defined(POOL_MODE_MPD) || defined(POOL_MODE_CTG) || defined(POOL_MODE_DSK)
    if (ref->pi.pool) {
      if (LOCAL_REF(ref)) {
        return me()->i_deref((voidIref *)ref);
      }
      return (char *)PoolMngr->pool(ref->pi.pool)->deref(ref);
    }
    assert(NULL_REF(ref->pi));
#else
    assert(0);
#endif
    return 0;
  };
  inline char *x_deref(poolRef ref) {
    return ref.pool ? (char *)PoolMngr->pool(
				  ref.pool < 0 ? mngr_indx
			                       : ref.pool)->deref(ref.index)
                    : 0;
  };
#define REF2MODE(ref,ret) ref2mode(ref,(voidRef *)(ret))
  inline void ref2mode(poolRef ref,voidRef *ret) {
#if REF_IS_PTR
    ret->cp = i_deref(ref);
#else
    if (ref.pool < 0) {
      ret->pi.pool  = mngr_indx;
      ret->pi.index = ref.index;
    } else {
      ret->pi       = ref;
    }
#endif
  }
#define XREF2MODE(ref,ret) xref2mode(ref,(voidRef *)(ret))
  inline void xref2mode(poolRef ref,voidRef *ret) {
#if REF_IS_PTR
    ret->cp = x_deref(ref);
#else
    if (ref.pool >= 0) { 
      ret->pi = ref;
    } else {
      ret->pi.pool  = mngr_indx;   
      ret->pi.index = ref.index;
    }
#endif
  }
#define IREF2MODE(ref,ret) iref2mode(ref,(voidRef *)(ret))
  inline void iref2mode(poolRef ref,voidRef *ret) {
#if REF_IS_PTR
    ret->cp = x_deref(ref);
#else
    ASSERT(LOCAL_REF(&ref));
    ret->pi.pool  = ref.pool ? -1
                             :  0;               
    ret->pi.index = ref.index;
#endif
  }
  inline void xtndMap(int to) {
#if POOL_CACHED
    int         t0,
                t = t0 = CacheTop();
    if (t < to) t = to;
    t += 10;
    CchData *pCache = (CchData *)CALLOC2(sizeof(CchData)
                                       + SIZED(BlockInfo,t),char);
    if (t0 >= 0) {
      BCOPY(Cache(),pCache,
            sizeof(CchData) + SIZED(BlockInfo,Cache()->top_block));
      Free(ModeData());
    } else {
      assert("Needed?" == 0);
    }
    pCache->top_block = t;
    setModeData(pCache);
#else
    int         t0,
                t = t0 = FlagsTop();
    if (t < to) t = to;
    t += 10;
    FlagData *pFlags = (FlagData *)CALLOC2(sizeof(FlagData) + SIZED(char,t),char);
    if (t0 >= 0) {
      BCOPY(Flags(),pFlags,
            sizeof(FlagData) + SIZED(char,Flags()->top_block));
      Free(ModeData());
    }
    pFlags->flags     = (char *)&pFlags[1];
    pFlags->top_block = t;
    setModeData(pFlags);
#endif
  };
  inline void newSelf(TemplatePool * pool,PMplData *data,ePM xtra) {
    pool->self      = pool;
    pool->pmode     = PM(pmode|xtra);
    pool->fmode     = fmode;
    pool->mngr_indx = mngr_indx;
    if (pool != this) {
      CopyVirtual(this,pool);
      PoolMngr->changeEntry(mngr_indx,pool,data);
    }
  }
};

TemplatePool *TemplatePool::Init(const File *f,const char *fm,
                                 int index,int bs_sz)
{
  TemplatePool *pool   = this,
               *allctd = 0;
  char         *tp     = (char *)(void *)this;

  assert(PAD_HEADER >= 0);

  if (bs_sz < MIN_HEADER) bs_sz = MIN_HEADER;

  BZERO(tp+8,sizeof(*this)-8);

  self       = pool;
  data_end   = bs_sz;
  mngr_indx  = index;
  ownr_prcss = -1;
  ownr_thrd  = -1;

#ifdef POOL_MODE_INM
  pool_size = MIN_HEADER;
#endif
#if defined(POOL_MODE_CTG) || defined(POOL_MODE_MPD)
  pool_size = MIN_CTG_POOL;
#endif
#ifdef POOL_MODE_DSK
  pool_size = CCH_BLK_SZ;
#endif
#ifdef POOL_MODE_NLD
#endif
#ifdef POOL_MODE_VRT
#endif

  pmode = POOL_MODE;

  if (index) {

    while (!(self = pool = allctd = (TemplatePool *)Calloc(1,pool_size))) {
      ExitMsg(ERROR(errno),"No memory for new pool");
    }

#if POOL_CACHED
    CchData *md   = (CchData *)CALLOC2(sizeof(CchData)
                                       + SIZED(BlockInfo,20),char);
    md->top_block = 20;
    md->pmode     = pmode;
#else
    void *md = 0;
#endif

    mngr_indx = PoolMngr->addEntry(pool,(PMplData *)md,index);

    BCOPY(this,pool,sizeof(*this));

    if (f) {
      pool = (TemplatePool *)pool->setFile(f,fm);
      if (pool != this) {
        ePM kill = PM(~pmode & PM_Mapped);
        BCOPY(pool,this,sizeof(*this));
        pmode = PM(pmode & ~kill);
      }
    }

    pmode = PM(PMF_Shadow|pmode);

    if (allctd != pool) Free(allctd);
  }

  return pool;
}

TemplatePool::TemplatePool(int index)
{
  this->Init((File *)0,"",index,-1);
}

TemplatePool::TemplatePool()
{
  this->Init((File *)0,"",0,-1);
}

TemplatePool::TemplatePool(const File *f,const char *fm,int index,int bs_sz)
{
  this->Init(f,fm,index,bs_sz);
}

TemplatePool::TemplatePool(const File *f,const char *fm)
{
  this->Init(f,fm,-1,-1);
}

void TemplatePool::Release()
{
  if (pmode & PM_Mapped) {
    freePages(this,pool_size);
  } else {
    Free(this);
  }
}

void TemplatePool::Destroy(bool chk)
{
  assert(mngr_indx > 0 &&
         (!chk || !(PMF_Mapped & pmode)) && "Bad mode for ~*Pool");

  if (!(pmode & PMF_Shadow)) {
    syncFile(FM_WRITE);
    PoolMngr->deleteEntry(mngr_indx);
    mngr_indx = -1;
    self      =  0;
  }
}

TemplatePool::~TemplatePool()
{
  if (mngr_indx > 0) Destroy(true);
}

void TemplatePool::minimize()
{
  TemplatePool *old_self = me();

  if (old_self != this) {
    old_self->minimize();
  } else {
#ifdef POOL_MODE_CTG
    U64   sz64 = pool_size;
    int   i    = mngr_indx;
    if ((pmode & PM_Mapped) &&
        0 == resizePages(old_self,data_end,&sz64)) {
      pool_size = sz64;
    } else {
      TemplatePool *new_self;
      U64           new_sz64 = data_end;
      if (new_self = (TemplatePool *)allocPages(&new_sz64)) {
        self      = (char *)new_self;
        BCOPY(old_self,new_self,data_end);
        new_self->pool_size = new_sz64;
        new_self->pmode     = PM(new_self->pmode|PM_Mapped);
        PoolMngr->changeEntry(i,new_self,ModeData());
        old_self->Release();
      }
    }
#endif
#ifdef POOL_MODE_MPD
    TemplatePool *old_self = this;
    MapData      *pmd      = Mapping();
    int           i        = mngr_indx,
                  sz       = data_end,
                  sts      = munmap((ADDR)old_self,pool_size);
    MappedFile   *pmf      = pmd->file;
    TemplatePool *pool     = (TemplatePool *)pmf->remap(sz);

    if (pool != old_self) {
      PoolMngr->changeEntry(i,pool,ModeData());
    }
#endif
  }
}

int TemplatePool::close_pool(int id,void *pd)
{
  void *md = ModeData();
  ePM   pm = pmode;

  this->Destroy(false);

  if (md) {
#if POOL_CACHED
    clearCache((CchData *)md);
#endif
#ifdef POOL_MODE_MPD
    ((MapData *)md)->file->Strm()->Seek(0,SEEK_END);
    DELETE(((MapData *)md)->file);
#endif
    Free(md);
  }

  if (!(pm & PM_Mapped)) {
    Free(this);
  }

  return 0;
}

int TemplatePool::close_pool()
{
  return close_pool(mngr_indx,ModeData());
}

int TemplatePool::dumpAscii(const char *filename)
{
  return STS_NIY;
}

ePM TemplatePool::getMode()
{
  return pmode;
}

int TemplatePool::pid()
{
  return ownr_prcss;
}

int TemplatePool::thread()
{
  return ownr_thrd;
}

void TemplatePool::setOwner(int p,int t)
{
  ownr_prcss = p;
  ownr_thrd  = t;
#ifdef POOL_MODE_MPD
  Mapping()->ownr_prcss = p;
#endif
}

const char *TemplatePool::strClass()
{
  return PM_CLASS;
}

const char *TemplatePool::strMode()
{
  static char buff[sizeof(strPoolMode) * 4];

  int f = 1,
      i = 0;

  *buff = 0;

  for (; f ; f <<= 1, i++) {
    if (f & pmode) {
       if (*buff) strcat(buff,",");
       strcat(buff,strPoolMode[i]);
    }
  }

  return buff;
}

ePM TemplatePool::changeMode(ePM to)
{
#include "convert.icc"
  return old;
}

#ifdef POOL_MODE_DSK
void TemplatePool::MapBlock(long blks,long blke,int flags) {
  do {
    if (blks >= Cache()->top_block) {
      xtndMap(blks);
    }
    if (!Cache()->mapped[blks].data) {
      long top = CCH_BLK(data_end);
      if (top < blks) {
        Cache()->mapped[blks].data  = CALLOC2(CCH_BLK_SZ,char);
        Cache()->mapped[blks].flags = BI_READ;
      } else {
        assert(0);
      }
    }
    Cache()->mapped[blks].flags |= flags;
  } while (blks++ < blke);
}

void TemplatePool::SyncBlock(long)  {assert(0);}
void TemplatePool::UnmapBlock(long) {assert(0);}

#endif

void TemplatePool::MrkExtndd(long blks,long blke)
{
  pmode = PM(pmode|PMF_LargeBlks);

#if POOL_CACHED
  do {
    if (blks > CacheTop()) {
      xtndMap(blks);
    }
    Cache()->mapped[blks].flags |= BI_EXTENDED;
  } while (blks++ < blke);
#else
  do {
    if (blks > FlagsTop()) {
      xtndMap(blks);
    }
    Flags()->flags[blks] |= BI_EXTENDED;
  } while (blks++ < blke);
#endif
}

static int setPoolSelf(void *old_ptr,int old_id,void *ptr,int id,U64 prtctd)
{
  if (old_id == id) {
    if (prtctd) {mprotect((ADDR)old_ptr, prtctd, PROT_READ|PROT_WRITE);}
    ((TemplatePool *)old_ptr)->self = (TemplatePool *)ptr;
    if (prtctd) {mprotect((ADDR)old_ptr, prtctd, PROT_READ);}
  }

  return 0;
}

int TemplatePool::DataEnd()
{
  return data_end;
}

void *TemplatePool::allocAligned(int size,int align,poolRef *pRef,eALC flags)
{
  char         *ep;
  poolRef       ref;

  if (self != this) {
    return me()->allocAligned(size,align,pRef,flags);
  }

  if (!(fmode & (FM_WRITE|FM_APPEND|FM_CREATE))) {
    ExitMsg(S_ERROR(STS_POOL_RO),fileName());
    return 0;
  }

#ifdef POOL_MODE_MPD
  if (ProcessID() != ownr_prcss) {
    ExitMsg(S_ERROR(STS_OWNER),fileName());
    return 0;
  }
#endif

  if (size > 0) {
#ifdef POOL_MODE_INM
    ep        = (char *)Malloc(size);
    ref.pool  = -1;
    ref.index = ((char *)ep) - ((char *)this);
    goto done;
#endif
    int a = 4;
    if (!(flags & (ALC_PERM|ALC_PAD))) {
      if      (size < 4) {size = 4; a = 4;}
      else if (size < 8) {size = 8; a = 4;}
      if (a > align) align = a;
    }
    if (a = data_end & (align-1)) a = align - a;
    long blks = CCH_BLK(data_end),
         blke = CCH_BLK(data_end + size + a);
    if (blks != blke) {
      if (size <= CCH_BLK_SZ) {
        if (flags & ALC_PAD) {
          assert(0 == (data_end + size)%CCH_BLK_SZ);
        } else {
          allocAligned(((++blks * CCH_BLK_SZ) - data_end),1,0,ALC_PAD);
          a = 0;
        }
      } else {
        int nd = CCH_BLK(size);
        if (blke - blks > nd) {
          allocAligned(((++blks * CCH_BLK_SZ) - data_end),1,0,ALC_PAD);
          a = 0;
        }
        if (blks != blke) {
          MrkExtndd(blks,blke);
        }
      }
    }
    if (a) {
      allocAligned(a,1,0,ALC_PAD);
    }
#ifdef POOL_MODE_CTG
    ref.pool   = -1;
    ref.index  = data_end;
    if (data_end + size > pool_size) {
      U64   old_size   = pool_size,
            new_size   = me()->pool_size + CTG_POOL_EXT;
      ASSERT(CTG_POOL_EXT >= getpagesize());
      TemplatePool *new_pool = (TemplatePool *)allocPages(&new_size),
                   *old_pool = (TemplatePool *)self;
      ePM           old_mode = pmode;
      ASSERT(this == old_pool);
      self     = (void *)new_pool;
      pmode    = PM(PMF_Trash);
      queueFree(old_pool,ARENA_POOL,mngr_indx,setPoolSelf,
                (old_mode & PM_Mapped) ? old_size
                                       : 0);
      BCOPY(this,new_pool,old_size);
      BZERO(&((char *)new_pool)[old_size],new_size-old_size);
      new_pool->self      = new_pool;
      new_pool->pool_size = new_size;
      new_pool->pmode     = PM(old_mode|PM_Mapped);
      PoolMngr->changeEntry(mngr_indx,self);
    }
    ep               = (char *)self;
    ep              += me()->data_end;
    me()->data_end  += size;
    goto done;
#endif
#ifdef POOL_MODE_DSK
    MapBlock(blks,blke,BI_WRITTEN|BI_READ);
    ep         = Cache()->mapped[blks].data;
    ep        += CCH_BLK_OFF(data_end);
    ref.pool   = -1;
    ref.index  = data_end;
    data_end  += size;
    goto done;
#endif
#ifdef POOL_MODE_MPD
    assert(0);
#endif
#ifdef POOL_MODE_NLD
    assert(0);
#endif
#ifdef POOL_MODE_VRT
    assert(0);
#endif
  }
  if (pRef) *pRef = NullRef;
  return 0;

done:
  if (flags & ALC_PAD) {
    int   idx = ref.index;
    char *pfb = (char *)ep;
    if (idx & 0x3) {
      idx      = ~0x3 & (idx+4);
      int incr = (idx - ref.index);
      size    -= incr;
      pfb     += incr;
    }
    if (size >= 8) {
      ((long *)pfb)[0] = me()->free_block;
      ((long *)pfb)[1] = size;
      me()->free_block = idx;
    } else if (size >= 4) {
      *(long *)pfb     = me()->free_word;
      me()->free_word  = idx;
    }
  }
  ASSERT(0 == ref.index%align);
  if (pRef) *pRef = ref;
  return ep;
}

void *TemplatePool::alloc(int size)
{
  return allocAligned(size,8,0,ALC_TEMP);
}

void TemplatePool::dealloc(void *p,int size)
{
  assert (0 == p || size >= 4);
  if (p) {
#ifdef POOL_MODE_INM
  Free(p);
#endif
#ifdef POOL_MODE_CTG
  int *pw   = (int *)p;
  if (size > 4) {
    *pw        = free_word;
    free_word  = index(p);
  } else {
    pw[0]      = free_block;
    pw[1]      = size;
    free_block = index(p);
  }
#endif
#ifdef POOL_MODE_DSK
#endif
#ifdef POOL_MODE_MPD
#endif
#ifdef POOL_MODE_NLD
#endif
#ifdef POOL_MODE_VRT
#endif
  }
}

void *TemplatePool::deref(int index)
{
  poolRef ref;
  ref.index = index;

  return i_deref(ref);
}

void *TemplatePool::deref(poolRef ref)
{
  return i_deref(ref);
}

void *TemplatePool::deref(voidIref *ref)
{
  return ref->pi.pool ? i_deref(ref)
                      : 0;
}

void TemplatePool::setRef(voidIref *pRef,poolRef ref)
{
  ref2mode(ref,(voidRef *)pRef);
}

void *TemplatePool::deref(voidXref *ref)
{
  return x_deref(ref);
}

long TemplatePool::index(void *ptr)
{
  void *pool_base = (void *)this;

  long a = *(long *)(&ptr);
  a     -= *(long *)(&pool_base);

  return a;
}

long TemplatePool::index(IREF(void) ref)
{
#if REF_IS_PTR
  return index(ref.ptr);
#else
  return ref.pi.index;
#endif
}

const char *TemplatePool::fileName()
{
  plStr *ps = P(file);

  return ps ? ps->buff
            : "";
}

void *TemplatePool::setFile(const File *f,const char *fm)
{
  TemplatePool *pool = (TemplatePool *)self;
  poolRef       ref;

  fmode = f->mode(fm);
  if ((fmode & FM_READ) && f->Exists()) {
#ifdef POOL_MODE_MPD
    if (!ModeData()) setModeData(CALLOC2(1,MapData));
    assert(!Mapping()->file);
    Mapping()->pmode = pmode;
    Mapping()->file  = new MappedFile(f->str(),f->strMode(fmode),pool_size);
    pool             = (TemplatePool *)Mapping()->file->base();
    newSelf(pool,ModeData(),PM_None);
#else
    Stream s;
    s.Open(f,fmode);
    pool = (TemplatePool *)readPool(&s);
    s.Close();
#endif
  }
#ifdef POOL_MODE_DSK
  pool->Cache()->mapped[0].flags = BI_LOCK|BI_READ;
  pool->Cache()->mapped[0].data  = (char *)pool;
#endif
  if (!pool->file.pi.pool && (fmode & (FM_WRITE|FM_APPEND))) {
    poolRef ref = pool->addString(*f); 
    ASSERT(LOCAL_REF(&ref));
    ref2mode(ref,(voidRef *)&pool->file);
    pool->data_start = pool->data_end;
  }

  return pool;
}

void *TemplatePool::readPool(Stream *s)
{
  int           l    = s->Size();
  ePM           xtra = PM_None;
  sPool         tmp;
  TemplatePool *np;

  if (l < MIN_HEADER) return this;

#ifdef POOL_MODE_MPD
  assert(0);
#endif
#ifdef POOL_MODE_NLD
  assert(0);
#endif
#ifdef POOL_MODE_VRT
  assert(0);
#endif

#ifdef POOL_MODE_DSK
  if (l > CCH_BLK_SZ) l = CCH_BLK_SZ;
#endif
  s->Read(&tmp,sizeof(tmp));
  if (tmp.pool_size == l && tmp.data_end == l) {
    char   *base,
           *tp   = (char *)&tmp;
    U64     ps   = l;
    if (data_end > l) {
       base = (char *)this;
    } else {
      if (fmode & FM_ANY_WRITE) {
#ifdef POOL_MODE_INM
#endif
#ifdef POOL_MODE_CTG
         if (ps < MIN_CTG_POOL) ps  = MIN_CTG_POOL;
         else                   ps += CTG_POOL_EXT;
#endif
#ifdef POOL_MODE_DSK
         ps = CCH_BLK_SZ;
#endif
       }
#ifdef POOL_MODE_CTG
       base = (char *)allocPages(&ps);
       xtra = PM_Mapped;
#else
       base = MALLOC2_N(ps,char);
#endif
    }
    l -= sizeof(tmp);
    l -= s->Read(&base[sizeof(tmp)],l);
    if (l) goto fail;
    tp += SIZEOF_VTAB;
    BCOPY(tp,&base[SIZEOF_VTAB],sizeof(tmp) - SIZEOF_VTAB);
    np            = (TemplatePool *)base;

    np->pool_size = ps;
    newSelf(np,ModeData(),xtra);
    return np;
  }

fail:
  ErrorMsg(STS_WARNING,"Failed to read pool %s",s->Name());
  return this;
}

int TemplatePool::writePool(Stream *s)
{
  sPool tmp;
  int   w = 0,
        e = CCH_BLK(data_end),
        b = 0,
        t,
        l,
        f;

  BCOPY(this,&tmp,sizeof(tmp));
  tmp.pool_size = data_end;

  w = s->Write(&tmp,sizeof(tmp));
  if (w != sizeof(tmp)) goto failed;
#ifdef POOL_MODE_CTG
  l = data_end - sizeof(tmp);
  w = s->Write(&((char *)this)[sizeof(tmp)],l);
  if (w != l) goto failed;
#endif
#ifdef POOL_MODE_DSK
  for (t = Cache()->top_block; b < t ; b++) {
    if ((f = Cache()->mapped[b].flags) & BI_WRITTEN) {
      f &= ~BI_WRITTEN;
      char *dp = Cache()->mapped[b].data;
      if (e == b) {
        l = CCH_BLK_OFF(data_end);
      } else {
        l = CCH_BLK_SZ;
      }
      if (0 == b) {
        l  -= sizeof(tmp);
        dp += sizeof(tmp);
      } else {
        s->Seek(b * CCH_BLK_SZ,SEEK_SET);
      }
      w = s->Write(dp,l);
      if (w != l) {
        goto failed;
      }
      Cache()->mapped[b].flags = (eBI)f;
    }
  }
#endif

  return w;
failed:
  ErrorMsg((eSTS)(STS_ERROR|ERROR(errno)),"Failed to write pool %s",s->Name());
  s->Unlink();
  return -1;
}

int TemplatePool::reload(eFM fm)
{
  int    mi = mngr_indx;
  plStr *ps = P(file);

  if (ps) {
    File f(ps->buff);

    close_pool();

    TemplatePool tmp;

    tmp.Init(&f,f.strMode(fm),mi,-1);
  }

  return mi;
}

int TemplatePool::reload(ePM pm)
{
  int     mi = mngr_indx,
          sz = pool_size;
  plStr  *ps = P(file);

  if (ps) {
    eFM  fm = fmode;
    File f(ps->buff);

    close_pool();

    if (pm & PMF_Shared) {
      fm = FM(fm |  FM_SHARED);
      pm = PM(pm & ~PMF_Shared);
    }

    mi = PoolMngr->newPool(pm,&f,f.strMode(fm),mi,sz);
  }

  return mi;
}

int TemplatePool::syncFile(eFM fm)
{
  int sts = 0;
  if (this != self) {
    sts = ((TemplatePool *)self)->syncFile(fm);
  } else {
    const char *fn  = fileName();

#ifdef POOL_MODE_INM
    if (fmode & fm & FM_WRITE) dumpAscii(fn);
#endif
#if defined(POOL_MODE_CTG) || defined(POOL_MODE_DSK)
    if (fmode & fm & FM_WRITE) {
      Stream s;
      File f(fn);
      s.Open(&f,fmode);
      if (writePool(&s) < 0) {
        sts = errno;
        s.Unlink();
      } else {
#if POOL_CACHED
        clearCache(Cache());
#endif
      }
      s.Close();
    }
#endif
#ifdef POOL_MODE_MPD
#endif
#ifdef POOL_MODE_NLD
#endif
#ifdef POOL_MODE_VRT
#endif
  }
  return sts;
}

poolRef TemplatePool::addString(const char *str,int reg)
{
  poolRef ref;
#include "addstring.icc"
  return ref;
}

poolRef TemplatePool::addString2(const char *str)
{
  poolRef ref;
#include "addstring.icc"
  return ref;
}

sFieldDesc *TemplatePool::description()
{
  static sFieldDesc Description[] = {
#include "TemplatePool-dsc.h"
  };

  return Description;
}

#include "describe.icc"

//undef PAD_HEADER THIS_CLASS
#undef  PAD_HEADER
#undef  THIS_CLASS
